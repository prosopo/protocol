#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub use self::prosopo::{Prosopo, ProsopoRef};
/// Concatenate two arrays (a and b) into a new array (c)
fn concat_u8<const A: usize, const B: usize, const C: usize>(
    a: &[u8; A],
    b: &[u8; B],
) -> [u8; C] {
    let mut c = [0; C];
    c[..A].copy_from_slice(a);
    c[A..A + B].copy_from_slice(b);
    c
}
#[allow(unused_macros)]
pub mod prosopo {
    impl ::ink::env::ContractEnv for Prosopo {
        type Env = ::ink::env::DefaultEnvironment;
    }
    type Environment = <Prosopo as ::ink::env::ContractEnv>::Env;
    type AccountId = <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::AccountId;
    type Balance = <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::Balance;
    type Hash = <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::Hash;
    type Timestamp = <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::Timestamp;
    type BlockNumber = <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::BlockNumber;
    const _: () = {
        struct Check {
            salt: (),
            field_0: Mapping<AccountId, Provider>,
            field_1: Mapping<ProviderState, BTreeSet<AccountId>>,
            field_2: Mapping<Hash, ()>,
            field_3: Mapping<Hash, CaptchaData>,
            field_4: u128,
            field_5: Mapping<AccountId, Dapp>,
            field_6: Lazy<Vec<AccountId>>,
            field_7: Mapping<AccountId, Operator>,
            field_8: Hash,
            field_9: Mapping<Hash, CaptchaSolutionCommitment>,
            field_10: Mapping<AccountId, User>,
            field_11: Mapping<AccountId, [u8; 32]>,
            field_12: u16,
            field_13: u64,
        }
    };
    #[cfg(not(feature = "__ink_dylint_Storage"))]
    pub struct Prosopo {
        providers: <Mapping<
            AccountId,
            Provider,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2592620659u32, ()>,
        >>::Type,
        provider_accounts: <Mapping<
            ProviderState,
            BTreeSet<AccountId>,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2926126014u32, ()>,
        >>::Type,
        service_origins: <Mapping<
            Hash,
            (),
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3503364718u32, ()>,
        >>::Type,
        captcha_data: <Mapping<
            Hash,
            CaptchaData,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<147389080u32, ()>,
        >>::Type,
        provider_stake_default: <u128 as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3572586451u32, ()>,
        >>::Type,
        dapp_stake_default: <u128 as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<4188011459u32, ()>,
        >>::Type,
        dapps: <Mapping<
            AccountId,
            Dapp,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<662914395u32, ()>,
        >>::Type,
        dapp_accounts: <Lazy<
            Vec<AccountId>,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2277631560u32, ()>,
        >>::Type,
        operators: <Mapping<
            AccountId,
            Operator,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<1934349505u32, ()>,
        >>::Type,
        operator_accounts: <Lazy<
            Vec<AccountId>,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3738363695u32, ()>,
        >>::Type,
        operator_stake_default: <u128 as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<863636140u32, ()>,
        >>::Type,
        operator_fee_currency: <Hash as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3519398236u32, ()>,
        >>::Type,
        captcha_solution_commitments: <Mapping<
            Hash,
            CaptchaSolutionCommitment,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3373090029u32, ()>,
        >>::Type,
        dapp_users: <Mapping<
            AccountId,
            User,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<3970608610u32, ()>,
        >>::Type,
        dapp_user_accounts: <Lazy<
            Vec<AccountId>,
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2567258358u32, ()>,
        >>::Type,
        operator_code_hash_votes: <Mapping<
            AccountId,
            [u8; 32],
        > as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2342775547u32, ()>,
        >>::Type,
        max_user_history_len: <u16 as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<1160370267u32, ()>,
        >>::Type,
        max_user_history_age: <u64 as ::ink::storage::traits::AutoStorableHint<
            ::ink::storage::traits::ManualKey<2730962885u32, ()>,
        >>::Type,
    }
    const _: () = {
        impl<
            __ink_generic_salt: ::ink::storage::traits::StorageKey,
        > ::ink::storage::traits::StorableHint<__ink_generic_salt> for Prosopo {
            type Type = Prosopo;
            type PreferredKey = ::ink::storage::traits::AutoKey;
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageKey for Prosopo {
            const KEY: ::ink::primitives::Key = <() as ::ink::storage::traits::StorageKey>::KEY;
        }
    };
    const _: () = {
        impl ::ink::storage::traits::Storable for Prosopo {
            #[inline(always)]
            #[allow(non_camel_case_types)]
            fn decode<__ink_I: ::scale::Input>(
                __input: &mut __ink_I,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(Prosopo {
                    providers: <<Mapping<
                        AccountId,
                        Provider,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2592620659u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    provider_accounts: <<Mapping<
                        ProviderState,
                        BTreeSet<AccountId>,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2926126014u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    service_origins: <<Mapping<
                        Hash,
                        (),
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3503364718u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    captcha_data: <<Mapping<
                        Hash,
                        CaptchaData,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<147389080u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    provider_stake_default: <<u128 as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3572586451u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    dapp_stake_default: <<u128 as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<4188011459u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    dapps: <<Mapping<
                        AccountId,
                        Dapp,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<662914395u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    dapp_accounts: <<Lazy<
                        Vec<AccountId>,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2277631560u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    operators: <<Mapping<
                        AccountId,
                        Operator,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<1934349505u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    operator_accounts: <<Lazy<
                        Vec<AccountId>,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3738363695u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    operator_stake_default: <<u128 as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<863636140u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    operator_fee_currency: <<Hash as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3519398236u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    captcha_solution_commitments: <<Mapping<
                        Hash,
                        CaptchaSolutionCommitment,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3373090029u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    dapp_users: <<Mapping<
                        AccountId,
                        User,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<3970608610u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    dapp_user_accounts: <<Lazy<
                        Vec<AccountId>,
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2567258358u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    operator_code_hash_votes: <<Mapping<
                        AccountId,
                        [u8; 32],
                    > as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2342775547u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    max_user_history_len: <<u16 as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<1160370267u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                    max_user_history_age: <<u64 as ::ink::storage::traits::AutoStorableHint<
                        ::ink::storage::traits::ManualKey<2730962885u32, ()>,
                    >>::Type as ::ink::storage::traits::Storable>::decode(__input)?,
                })
            }
            #[inline(always)]
            #[allow(non_camel_case_types)]
            fn encode<__ink_O: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __dest: &mut __ink_O,
            ) {
                match self {
                    Prosopo {
                        providers: __binding_0,
                        provider_accounts: __binding_1,
                        service_origins: __binding_2,
                        captcha_data: __binding_3,
                        provider_stake_default: __binding_4,
                        dapp_stake_default: __binding_5,
                        dapps: __binding_6,
                        dapp_accounts: __binding_7,
                        operators: __binding_8,
                        operator_accounts: __binding_9,
                        operator_stake_default: __binding_10,
                        operator_fee_currency: __binding_11,
                        captcha_solution_commitments: __binding_12,
                        dapp_users: __binding_13,
                        dapp_user_accounts: __binding_14,
                        operator_code_hash_votes: __binding_15,
                        max_user_history_len: __binding_16,
                        max_user_history_age: __binding_17,
                    } => {
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_0,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_1,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_2,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_3,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_4,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_5,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_6,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_7,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_8,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_9,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_10,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_11,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_12,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_13,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_14,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_15,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_16,
                                __dest,
                            );
                        }
                        {
                            ::ink::storage::traits::Storable::encode(
                                __binding_17,
                                __dest,
                            );
                        }
                    }
                }
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Prosopo {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Prosopo", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            AccountId,
                                            Provider,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2592620659u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("providers")
                                    .type_name(
                                        "<Mapping<AccountId, Provider> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<2592620659u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            ProviderState,
                                            BTreeSet<AccountId>,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2926126014u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("provider_accounts")
                                    .type_name(
                                        "<Mapping<ProviderState, BTreeSet<AccountId>> as::ink::storage::\ntraits::AutoStorableHint<::ink::storage::traits::ManualKey<\n2926126014u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            Hash,
                                            (),
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3503364718u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("service_origins")
                                    .type_name(
                                        "<Mapping<Hash, ()> as::ink::storage::traits::AutoStorableHint<::\nink::storage::traits::ManualKey<3503364718u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            Hash,
                                            CaptchaData,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<147389080u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("captcha_data")
                                    .type_name(
                                        "<Mapping<Hash, CaptchaData> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<147389080u32, ()\n>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <u128 as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3572586451u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("provider_stake_default")
                                    .type_name(
                                        "<u128 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<3572586451u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <u128 as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<4188011459u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("dapp_stake_default")
                                    .type_name(
                                        "<u128 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<4188011459u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            AccountId,
                                            Dapp,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<662914395u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("dapps")
                                    .type_name(
                                        "<Mapping<AccountId, Dapp> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<662914395u32, ()\n>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Lazy<
                                            Vec<AccountId>,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2277631560u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("dapp_accounts")
                                    .type_name(
                                        "<Lazy<Vec<AccountId>> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<2277631560u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            AccountId,
                                            Operator,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<1934349505u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("operators")
                                    .type_name(
                                        "<Mapping<AccountId, Operator> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<1934349505u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Lazy<
                                            Vec<AccountId>,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3738363695u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("operator_accounts")
                                    .type_name(
                                        "<Lazy<Vec<AccountId>> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<3738363695u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <u128 as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<863636140u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("operator_stake_default")
                                    .type_name(
                                        "<u128 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<863636140u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Hash as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3519398236u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("operator_fee_currency")
                                    .type_name(
                                        "<Hash as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<3519398236u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            Hash,
                                            CaptchaSolutionCommitment,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3373090029u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("captcha_solution_commitments")
                                    .type_name(
                                        "<Mapping<Hash, CaptchaSolutionCommitment> as::ink::storage::traits\n::AutoStorableHint<::ink::storage::traits::ManualKey<\n3373090029u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            AccountId,
                                            User,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<3970608610u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("dapp_users")
                                    .type_name(
                                        "<Mapping<AccountId, User> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<3970608610u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Lazy<
                                            Vec<AccountId>,
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2567258358u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("dapp_user_accounts")
                                    .type_name(
                                        "<Lazy<Vec<AccountId>> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<2567258358u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <Mapping<
                                            AccountId,
                                            [u8; 32],
                                        > as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2342775547u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("operator_code_hash_votes")
                                    .type_name(
                                        "<Mapping<AccountId,[u8; 32]> as::ink::storage::traits::\nAutoStorableHint<::ink::storage::traits::ManualKey<2342775547u32,\n()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <u16 as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<1160370267u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("max_user_history_len")
                                    .type_name(
                                        "<u16 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<1160370267u32, ()>,>>::Type",
                                    )
                            })
                            .field(|f| {
                                f
                                    .ty::<
                                        <u64 as ::ink::storage::traits::AutoStorableHint<
                                            ::ink::storage::traits::ManualKey<2730962885u32, ()>,
                                        >>::Type,
                                    >()
                                    .name("max_user_history_age")
                                    .type_name(
                                        "<u64 as::ink::storage::traits::AutoStorableHint<::ink::storage\n::traits::ManualKey<2730962885u32, ()>,>>::Type",
                                    )
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Prosopo {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "Prosopo",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "providers",
                                <<Mapping<
                                    AccountId,
                                    Provider,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2592620659u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider_accounts",
                                <<Mapping<
                                    ProviderState,
                                    BTreeSet<AccountId>,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2926126014u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "service_origins",
                                <<Mapping<
                                    Hash,
                                    (),
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3503364718u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "captcha_data",
                                <<Mapping<
                                    Hash,
                                    CaptchaData,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<147389080u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider_stake_default",
                                <<u128 as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3572586451u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapp_stake_default",
                                <<u128 as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<4188011459u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapps",
                                <<Mapping<
                                    AccountId,
                                    Dapp,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<662914395u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapp_accounts",
                                <<Lazy<
                                    Vec<AccountId>,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2277631560u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "operators",
                                <<Mapping<
                                    AccountId,
                                    Operator,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<1934349505u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "operator_accounts",
                                <<Lazy<
                                    Vec<AccountId>,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3738363695u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "operator_stake_default",
                                <<u128 as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<863636140u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "operator_fee_currency",
                                <<Hash as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3519398236u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "captcha_solution_commitments",
                                <<Mapping<
                                    Hash,
                                    CaptchaSolutionCommitment,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3373090029u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapp_users",
                                <<Mapping<
                                    AccountId,
                                    User,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<3970608610u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapp_user_accounts",
                                <<Lazy<
                                    Vec<AccountId>,
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2567258358u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "operator_code_hash_votes",
                                <<Mapping<
                                    AccountId,
                                    [u8; 32],
                                > as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2342775547u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "max_user_history_len",
                                <<u16 as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<1160370267u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "max_user_history_age",
                                <<u64 as ::ink::storage::traits::AutoStorableHint<
                                    ::ink::storage::traits::ManualKey<2730962885u32, ()>,
                                >>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    const _: () = {
        impl ::ink::reflect::ContractName for Prosopo {
            const NAME: &'static str = "Prosopo";
        }
    };
    const _: () = {
        impl<'a> ::ink::codegen::Env for &'a Prosopo {
            type EnvAccess = ::ink::EnvAccess<
                'a,
                <Prosopo as ::ink::env::ContractEnv>::Env,
            >;
            fn env(self) -> Self::EnvAccess {
                <<Self as ::ink::codegen::Env>::EnvAccess as ::core::default::Default>::default()
            }
        }
        impl<'a> ::ink::codegen::StaticEnv for Prosopo {
            type EnvAccess = ::ink::EnvAccess<
                'static,
                <Prosopo as ::ink::env::ContractEnv>::Env,
            >;
            fn env() -> Self::EnvAccess {
                <<Self as ::ink::codegen::StaticEnv>::EnvAccess as ::core::default::Default>::default()
            }
        }
    };
    const _: () = {
        #[allow(unused_imports)]
        use ::ink::codegen::{Env as _, StaticEnv as _};
        use ::ink::codegen::EmitEvent as _;
    };
    const _: () = {
        impl<'a> ::ink::codegen::EmitEvent<Prosopo>
        for ::ink::EnvAccess<'a, Environment> {
            fn emit_event<E>(self, event: E)
            where
                E: Into<<Prosopo as ::ink::reflect::ContractEventBase>::Type>,
            {
                ::ink::env::emit_event::<
                    Environment,
                    <Prosopo as ::ink::reflect::ContractEventBase>::Type,
                >(event.into());
            }
        }
    };
    #[allow(non_camel_case_types)]
    #[cfg(not(feature = "__ink_dylint_EventBase"))]
    pub enum __ink_EventBase {
        ProviderRegister(ProviderRegister),
        ProviderDeregister(ProviderDeregister),
        ProviderUpdate(ProviderUpdate),
        ProviderStake(ProviderStake),
        ProviderAddDataset(ProviderAddDataset),
        ProviderUnstake(ProviderUnstake),
        ProviderApprove(ProviderApprove),
        ProviderDisapprove(ProviderDisapprove),
        DappRegister(DappRegister),
        DappUpdate(DappUpdate),
        DappFund(DappFund),
        DappCancel(DappCancel),
        DappUserCommit(DappUserCommit),
    }
    #[allow(deprecated)]
    const _: () = {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::scale::Encode for __ink_EventBase {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    __ink_EventBase::ProviderRegister(ref aa) => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderDeregister(ref aa) => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderUpdate(ref aa) => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderStake(ref aa) => {
                        __codec_dest_edqy.push_byte(3usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderAddDataset(ref aa) => {
                        __codec_dest_edqy.push_byte(4usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderUnstake(ref aa) => {
                        __codec_dest_edqy.push_byte(5usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderApprove(ref aa) => {
                        __codec_dest_edqy.push_byte(6usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::ProviderDisapprove(ref aa) => {
                        __codec_dest_edqy.push_byte(7usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::DappRegister(ref aa) => {
                        __codec_dest_edqy.push_byte(8usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::DappUpdate(ref aa) => {
                        __codec_dest_edqy.push_byte(9usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::DappFund(ref aa) => {
                        __codec_dest_edqy.push_byte(10usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::DappCancel(ref aa) => {
                        __codec_dest_edqy.push_byte(11usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    __ink_EventBase::DappUserCommit(ref aa) => {
                        __codec_dest_edqy.push_byte(12usize as ::core::primitive::u8);
                        ::scale::Encode::encode_to(aa, __codec_dest_edqy);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for __ink_EventBase {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[allow(non_camel_case_types)]
        #[automatically_derived]
        impl ::scale::Decode for __ink_EventBase {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e
                            .chain(
                                "Could not decode `__ink_EventBase`, failed to read variant byte",
                            )
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderRegister({
                                let __codec_res_edqy = <ProviderRegister as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderRegister.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderDeregister({
                                let __codec_res_edqy = <ProviderDeregister as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderDeregister.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderUpdate({
                                let __codec_res_edqy = <ProviderUpdate as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderUpdate.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 3usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderStake({
                                let __codec_res_edqy = <ProviderStake as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderStake.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 4usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderAddDataset({
                                let __codec_res_edqy = <ProviderAddDataset as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderAddDataset.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 5usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderUnstake({
                                let __codec_res_edqy = <ProviderUnstake as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderUnstake.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 6usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderApprove({
                                let __codec_res_edqy = <ProviderApprove as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderApprove.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 7usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::ProviderDisapprove({
                                let __codec_res_edqy = <ProviderDisapprove as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::ProviderDisapprove.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 8usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::DappRegister({
                                let __codec_res_edqy = <DappRegister as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain("Could not decode `__ink_EventBase::DappRegister.0`"),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 9usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::DappUpdate({
                                let __codec_res_edqy = <DappUpdate as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `__ink_EventBase::DappUpdate.0`"),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 10usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::DappFund({
                                let __codec_res_edqy = <DappFund as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `__ink_EventBase::DappFund.0`"),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 11usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::DappCancel({
                                let __codec_res_edqy = <DappCancel as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e.chain("Could not decode `__ink_EventBase::DappCancel.0`"),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 12usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            __ink_EventBase::DappUserCommit({
                                let __codec_res_edqy = <DappUserCommit as ::scale::Decode>::decode(
                                    __codec_input_edqy,
                                );
                                match __codec_res_edqy {
                                    ::core::result::Result::Err(e) => {
                                        return ::core::result::Result::Err(
                                            e
                                                .chain(
                                                    "Could not decode `__ink_EventBase::DappUserCommit.0`",
                                                ),
                                        );
                                    }
                                    ::core::result::Result::Ok(__codec_res_edqy) => {
                                        __codec_res_edqy
                                    }
                                }
                            }),
                        )
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into(
                                "Could not decode `__ink_EventBase`, variant doesn't exist",
                            ),
                        )
                    }
                }
            }
        }
    };
    const _: () = {
        impl ::ink::reflect::ContractEventBase for Prosopo {
            type Type = __ink_EventBase;
        }
    };
    const _: () = {
        impl From<ProviderRegister> for __ink_EventBase {
            fn from(event: ProviderRegister) -> Self {
                Self::ProviderRegister(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderDeregister> for __ink_EventBase {
            fn from(event: ProviderDeregister) -> Self {
                Self::ProviderDeregister(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderUpdate> for __ink_EventBase {
            fn from(event: ProviderUpdate) -> Self {
                Self::ProviderUpdate(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderStake> for __ink_EventBase {
            fn from(event: ProviderStake) -> Self {
                Self::ProviderStake(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderAddDataset> for __ink_EventBase {
            fn from(event: ProviderAddDataset) -> Self {
                Self::ProviderAddDataset(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderUnstake> for __ink_EventBase {
            fn from(event: ProviderUnstake) -> Self {
                Self::ProviderUnstake(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderApprove> for __ink_EventBase {
            fn from(event: ProviderApprove) -> Self {
                Self::ProviderApprove(event)
            }
        }
    };
    const _: () = {
        impl From<ProviderDisapprove> for __ink_EventBase {
            fn from(event: ProviderDisapprove) -> Self {
                Self::ProviderDisapprove(event)
            }
        }
    };
    const _: () = {
        impl From<DappRegister> for __ink_EventBase {
            fn from(event: DappRegister) -> Self {
                Self::DappRegister(event)
            }
        }
    };
    const _: () = {
        impl From<DappUpdate> for __ink_EventBase {
            fn from(event: DappUpdate) -> Self {
                Self::DappUpdate(event)
            }
        }
    };
    const _: () = {
        impl From<DappFund> for __ink_EventBase {
            fn from(event: DappFund) -> Self {
                Self::DappFund(event)
            }
        }
    };
    const _: () = {
        impl From<DappCancel> for __ink_EventBase {
            fn from(event: DappCancel) -> Self {
                Self::DappCancel(event)
            }
        }
    };
    const _: () = {
        impl From<DappUserCommit> for __ink_EventBase {
            fn from(event: DappUserCommit) -> Self {
                Self::DappUserCommit(event)
            }
        }
    };
    const _: () = {
        pub enum __ink_UndefinedAmountOfTopics {}
        impl ::ink::env::topics::EventTopicsAmount for __ink_UndefinedAmountOfTopics {
            const AMOUNT: usize = 0;
        }
        impl ::ink::env::Topics for __ink_EventBase {
            type RemainingTopics = __ink_UndefinedAmountOfTopics;
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                match self {
                    Self::ProviderRegister(event) => {
                        <ProviderRegister as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderDeregister(event) => {
                        <ProviderDeregister as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderUpdate(event) => {
                        <ProviderUpdate as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderStake(event) => {
                        <ProviderStake as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderAddDataset(event) => {
                        <ProviderAddDataset as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderUnstake(event) => {
                        <ProviderUnstake as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderApprove(event) => {
                        <ProviderApprove as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::ProviderDisapprove(event) => {
                        <ProviderDisapprove as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::DappRegister(event) => {
                        <DappRegister as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::DappUpdate(event) => {
                        <DappUpdate as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::DappFund(event) => {
                        <DappFund as ::ink::env::Topics>::topics::<E, B>(event, builder)
                    }
                    Self::DappCancel(event) => {
                        <DappCancel as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                    Self::DappUserCommit(event) => {
                        <DappUserCommit as ::ink::env::Topics>::topics::<
                            E,
                            B,
                        >(event, builder)
                    }
                }
            }
        }
    };
    impl ::ink::codegen::EventLenTopics for ProviderRegister {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderRegister,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderDeregister {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderDeregister,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderUpdate {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderUpdate,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderStake {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderStake,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderAddDataset {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderAddDataset,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderUnstake {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderUnstake,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderApprove {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderApprove,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for ProviderDisapprove {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            ProviderDisapprove,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for DappRegister {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            DappRegister,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for DappUpdate {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            DappUpdate,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for DappFund {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            DappFund,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for DappCancel {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            DappCancel,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    impl ::ink::codegen::EventLenTopics for DappUserCommit {
        type LenTopics = ::ink::codegen::EventTopics<1usize>;
    }
    const _: () = ::ink::codegen::utils::consume_type::<
        ::ink::codegen::EventRespectsTopicLimit<
            DappUserCommit,
            {
                <<Prosopo as ::ink::env::ContractEnv>::Env as ::ink::env::Environment>::MAX_EVENT_TOPICS
            },
        >,
    >();
    pub struct ProviderRegister {
        account: AccountId,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderRegister {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.account, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.account)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.account, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderRegister {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderRegister {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderRegister {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderRegister::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderRegister {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("ProviderRegister", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderRegister {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderRegister",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderRegister {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderRegister {
        #[inline]
        fn eq(&self, other: &ProviderRegister) -> bool {
            self.account == other.account
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderRegister {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProviderRegister",
                "account",
                &&self.account,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderRegister {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderRegister {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderRegister {
        #[inline]
        fn clone(&self) -> ProviderRegister {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderRegister {}
    pub struct ProviderDeregister {
        account: AccountId,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderDeregister {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.account, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.account)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.account, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderDeregister {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderDeregister {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderDeregister {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderDeregister::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderDeregister {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("ProviderDeregister", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderDeregister {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderDeregister",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderDeregister {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderDeregister {
        #[inline]
        fn eq(&self, other: &ProviderDeregister) -> bool {
            self.account == other.account
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderDeregister {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProviderDeregister",
                "account",
                &&self.account,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderDeregister {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderDeregister {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderDeregister {
        #[inline]
        fn clone(&self) -> ProviderDeregister {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderDeregister {}
    pub struct ProviderUpdate {
        account: AccountId,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderUpdate {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.account, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.account)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.account, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderUpdate {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderUpdate {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderUpdate {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderUpdate::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderUpdate {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProviderUpdate", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderUpdate {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderUpdate",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderUpdate {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderUpdate {
        #[inline]
        fn eq(&self, other: &ProviderUpdate) -> bool {
            self.account == other.account
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderUpdate {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProviderUpdate",
                "account",
                &&self.account,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderUpdate {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderUpdate {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderUpdate {
        #[inline]
        fn clone(&self) -> ProviderUpdate {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderUpdate {}
    pub struct ProviderStake {
        account: AccountId,
        value: Balance,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderStake {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderStake {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderStake {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderStake {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderStake::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderStake::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderStake {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProviderStake", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderStake {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderStake",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderStake {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderStake {
        #[inline]
        fn eq(&self, other: &ProviderStake) -> bool {
            self.account == other.account && self.value == other.value
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderStake {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "ProviderStake",
                "account",
                &self.account,
                "value",
                &&self.value,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderStake {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderStake {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderStake {
        #[inline]
        fn clone(&self) -> ProviderStake {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderStake {}
    pub struct ProviderAddDataset {
        account: AccountId,
        dataset_id: Hash,
        dataset_id_content: Hash,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderAddDataset {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id_content, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderAddDataset {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderAddDataset {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderAddDataset {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderAddDataset::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderAddDataset::dataset_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id_content: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `ProviderAddDataset::dataset_id_content`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderAddDataset {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("ProviderAddDataset", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id_content").type_name("Hash")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderAddDataset {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderAddDataset",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id_content",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderAddDataset {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderAddDataset {
        #[inline]
        fn eq(&self, other: &ProviderAddDataset) -> bool {
            self.account == other.account && self.dataset_id == other.dataset_id
                && self.dataset_id_content == other.dataset_id_content
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderAddDataset {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "ProviderAddDataset",
                "account",
                &self.account,
                "dataset_id",
                &self.dataset_id,
                "dataset_id_content",
                &&self.dataset_id_content,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderAddDataset {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderAddDataset {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Hash>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderAddDataset {
        #[inline]
        fn clone(&self) -> ProviderAddDataset {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Hash>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderAddDataset {}
    pub struct ProviderUnstake {
        account: AccountId,
        value: Balance,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderUnstake {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderUnstake {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderUnstake {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderUnstake {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderUnstake::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderUnstake::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderUnstake {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProviderUnstake", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderUnstake {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderUnstake",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderUnstake {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderUnstake {
        #[inline]
        fn eq(&self, other: &ProviderUnstake) -> bool {
            self.account == other.account && self.value == other.value
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderUnstake {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "ProviderUnstake",
                "account",
                &self.account,
                "value",
                &&self.value,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderUnstake {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderUnstake {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderUnstake {
        #[inline]
        fn clone(&self) -> ProviderUnstake {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderUnstake {}
    pub struct ProviderApprove {
        captcha_solution_commitment_id: Hash,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderApprove {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(
                    &&self.captcha_solution_commitment_id,
                    __codec_dest_edqy,
                )
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.captcha_solution_commitment_id)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.captcha_solution_commitment_id, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderApprove {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderApprove {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderApprove {
                    captcha_solution_commitment_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `ProviderApprove::captcha_solution_commitment_id`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderApprove {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProviderApprove", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<Hash>()
                                    .name("captcha_solution_commitment_id")
                                    .type_name("Hash")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderApprove {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderApprove",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "captcha_solution_commitment_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderApprove {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderApprove {
        #[inline]
        fn eq(&self, other: &ProviderApprove) -> bool {
            self.captcha_solution_commitment_id == other.captcha_solution_commitment_id
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderApprove {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProviderApprove",
                "captcha_solution_commitment_id",
                &&self.captcha_solution_commitment_id,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderApprove {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderApprove {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<Hash>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderApprove {
        #[inline]
        fn clone(&self) -> ProviderApprove {
            let _: ::core::clone::AssertParamIsClone<Hash>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderApprove {}
    pub struct ProviderDisapprove {
        captcha_solution_commitment_id: Hash,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderDisapprove {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(
                    &&self.captcha_solution_commitment_id,
                    __codec_dest_edqy,
                )
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.captcha_solution_commitment_id)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.captcha_solution_commitment_id, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderDisapprove {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderDisapprove {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderDisapprove {
                    captcha_solution_commitment_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `ProviderDisapprove::captcha_solution_commitment_id`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderDisapprove {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("ProviderDisapprove", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<Hash>()
                                    .name("captcha_solution_commitment_id")
                                    .type_name("Hash")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderDisapprove {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderDisapprove",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "captcha_solution_commitment_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderDisapprove {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderDisapprove {
        #[inline]
        fn eq(&self, other: &ProviderDisapprove) -> bool {
            self.captcha_solution_commitment_id == other.captcha_solution_commitment_id
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderDisapprove {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProviderDisapprove",
                "captcha_solution_commitment_id",
                &&self.captcha_solution_commitment_id,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderDisapprove {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderDisapprove {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<Hash>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderDisapprove {
        #[inline]
        fn clone(&self) -> ProviderDisapprove {
            let _: ::core::clone::AssertParamIsClone<Hash>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderDisapprove {}
    pub struct DappRegister {
        contract: AccountId,
        owner: AccountId,
        value: Balance,
        payee: DappPayee,
        status: GovernanceStatus,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappRegister {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.owner, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.payee, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappRegister {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappRegister {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(DappRegister {
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappRegister::contract`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    owner: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappRegister::owner`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappRegister::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    payee: {
                        let __codec_res_edqy = <DappPayee as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappRegister::payee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappRegister::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappRegister {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappRegister", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("owner").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            })
                            .field(|f| {
                                f.ty::<DappPayee>().name("payee").type_name("DappPayee")
                            })
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappRegister {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "DappRegister",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "owner",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "payee",
                                <DappPayee as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappRegister {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappRegister {
        #[inline]
        fn eq(&self, other: &DappRegister) -> bool {
            self.contract == other.contract && self.owner == other.owner
                && self.value == other.value && self.payee == other.payee
                && self.status == other.status
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappRegister {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field5_finish(
                f,
                "DappRegister",
                "contract",
                &self.contract,
                "owner",
                &self.owner,
                "value",
                &self.value,
                "payee",
                &self.payee,
                "status",
                &&self.status,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappRegister {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappRegister {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
            let _: ::core::cmp::AssertParamIsEq<DappPayee>;
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappRegister {
        #[inline]
        fn clone(&self) -> DappRegister {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            let _: ::core::clone::AssertParamIsClone<DappPayee>;
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappRegister {}
    pub struct DappUpdate {
        contract: AccountId,
        owner: AccountId,
        value: Balance,
        payee: DappPayee,
        status: GovernanceStatus,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappUpdate {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.owner, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.payee, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappUpdate {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappUpdate {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(DappUpdate {
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUpdate::contract`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    owner: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUpdate::owner`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUpdate::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    payee: {
                        let __codec_res_edqy = <DappPayee as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUpdate::payee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUpdate::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappUpdate {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappUpdate", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("owner").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            })
                            .field(|f| {
                                f.ty::<DappPayee>().name("payee").type_name("DappPayee")
                            })
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappUpdate {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "DappUpdate",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "owner",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "payee",
                                <DappPayee as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappUpdate {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappUpdate {
        #[inline]
        fn eq(&self, other: &DappUpdate) -> bool {
            self.contract == other.contract && self.owner == other.owner
                && self.value == other.value && self.payee == other.payee
                && self.status == other.status
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappUpdate {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field5_finish(
                f,
                "DappUpdate",
                "contract",
                &self.contract,
                "owner",
                &self.owner,
                "value",
                &self.value,
                "payee",
                &self.payee,
                "status",
                &&self.status,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappUpdate {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappUpdate {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
            let _: ::core::cmp::AssertParamIsEq<DappPayee>;
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappUpdate {
        #[inline]
        fn clone(&self) -> DappUpdate {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            let _: ::core::clone::AssertParamIsClone<DappPayee>;
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappUpdate {}
    pub struct DappFund {
        contract: AccountId,
        value: Balance,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappFund {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappFund {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappFund {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(DappFund {
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappFund::contract`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappFund::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappFund {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappFund", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappFund {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "DappFund",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappFund {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappFund {
        #[inline]
        fn eq(&self, other: &DappFund) -> bool {
            self.contract == other.contract && self.value == other.value
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappFund {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "DappFund",
                "contract",
                &self.contract,
                "value",
                &&self.value,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappFund {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappFund {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappFund {
        #[inline]
        fn clone(&self) -> DappFund {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappFund {}
    pub struct DappCancel {
        contract: AccountId,
        value: Balance,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappCancel {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.value, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappCancel {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappCancel {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(DappCancel {
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappCancel::contract`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    value: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappCancel::value`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappCancel {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappCancel", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("value").type_name("Balance")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappCancel {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "DappCancel",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "value",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappCancel {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappCancel {
        #[inline]
        fn eq(&self, other: &DappCancel) -> bool {
            self.contract == other.contract && self.value == other.value
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappCancel {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "DappCancel",
                "contract",
                &self.contract,
                "value",
                &&self.value,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappCancel {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappCancel {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappCancel {
        #[inline]
        fn clone(&self) -> DappCancel {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappCancel {}
    pub struct DappUserCommit {
        account: AccountId,
        merkle_tree_root: Hash,
        contract: AccountId,
        dataset_id: Hash,
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappUserCommit {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.merkle_tree_root, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappUserCommit {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappUserCommit {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(DappUserCommit {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUserCommit::account`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    merkle_tree_root: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `DappUserCommit::merkle_tree_root`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUserCommit::contract`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `DappUserCommit::dataset_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappUserCommit {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappUserCommit", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("merkle_tree_root").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id").type_name("Hash")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappUserCommit {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "DappUserCommit",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "merkle_tree_root",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappUserCommit {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappUserCommit {
        #[inline]
        fn eq(&self, other: &DappUserCommit) -> bool {
            self.account == other.account
                && self.merkle_tree_root == other.merkle_tree_root
                && self.contract == other.contract && self.dataset_id == other.dataset_id
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappUserCommit {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "DappUserCommit",
                "account",
                &self.account,
                "merkle_tree_root",
                &self.merkle_tree_root,
                "contract",
                &self.contract,
                "dataset_id",
                &&self.dataset_id,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappUserCommit {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappUserCommit {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Hash>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappUserCommit {
        #[inline]
        fn clone(&self) -> DappUserCommit {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Hash>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappUserCommit {}
    const _: () = {
        impl ::ink::env::Topics for ProviderRegister {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 25usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderRegister",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderRegister::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderDeregister {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 27usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderDeregister",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderDeregister::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderUpdate {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 23usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderUpdate",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderUpdate::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderStake {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 22usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderStake",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderStake::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderAddDataset {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 27usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderAddDataset",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderAddDataset::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderUnstake {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 24usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderUnstake",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::ProviderUnstake::account",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderApprove {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 24usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderApprove",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<Hash>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.captcha_solution_commitment_id,
                            prefix: b"Prosopo::ProviderApprove::captcha_solution_commitment_id",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for ProviderDisapprove {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 27usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::ProviderDisapprove",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<Hash>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.captcha_solution_commitment_id,
                            prefix: b"Prosopo::ProviderDisapprove::captcha_solution_commitment_id",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for DappRegister {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 21usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::DappRegister",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.contract,
                            prefix: b"Prosopo::DappRegister::contract",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for DappUpdate {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 19usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::DappUpdate",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.contract,
                            prefix: b"Prosopo::DappUpdate::contract",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for DappFund {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 17usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::DappFund",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.contract,
                            prefix: b"Prosopo::DappFund::contract",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for DappCancel {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 19usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::DappCancel",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.contract,
                            prefix: b"Prosopo::DappCancel::contract",
                        },
                    )
                    .finish()
            }
        }
    };
    const _: () = {
        impl ::ink::env::Topics for DappUserCommit {
            type RemainingTopics = [::ink::env::topics::state::HasRemainingTopics; 2usize];
            fn topics<E, B>(
                &self,
                builder: ::ink::env::topics::TopicsBuilder<
                    ::ink::env::topics::state::Uninit,
                    E,
                    B,
                >,
            ) -> <B as ::ink::env::topics::TopicsBuilderBackend<E>>::Output
            where
                E: ::ink::env::Environment,
                B: ::ink::env::topics::TopicsBuilderBackend<E>,
            {
                builder
                    .build::<Self>()
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<[u8; 23usize]>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: b"Prosopo::DappUserCommit",
                            prefix: b"",
                        },
                    )
                    .push_topic::<
                        ::ink::env::topics::PrefixedValue<AccountId>,
                    >(
                        &::ink::env::topics::PrefixedValue {
                            value: &self.account,
                            prefix: b"Prosopo::DappUserCommit::account",
                        },
                    )
                    .finish()
            }
        }
    };
    impl ::ink::reflect::ContractAmountDispatchables for Prosopo {
        const MESSAGES: ::core::primitive::usize = 30usize;
        const CONSTRUCTORS: ::core::primitive::usize = 1usize;
    }
    impl ::ink::reflect::ContractDispatchableMessages<
        { <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES },
    > for Prosopo {
        const IDS: [::core::primitive::u32; <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES] = [
            0xF6C00565_u32,
            0x76E26191_u32,
            0xC66F9A2A_u32,
            0xD2F70DE8_u32,
            0x5EFF53CF_u32,
            0x95980B6F_u32,
            0x75980EA7_u32,
            0x42B45EFA_u32,
            0x55DA62A9_u32,
            0x3B2A7048_u32,
            0x5B965EAB_u32,
            0xD33625C0_u32,
            0xB04FD5FB_u32,
            0xBE7B6EF9_u32,
            0xBE930F18_u32,
            0x7A54158D_u32,
            0x42DD7F6B_u32,
            0x812D61E2_u32,
            0xB3DFDAF9_u32,
            0x028EBE00_u32,
            0xF8FD5066_u32,
            0x998D522C_u32,
            0x84F344F6_u32,
            0xD542160B_u32,
            0x54B28AB4_u32,
            0x4AEE5BAD_u32,
            0xD2ED90D7_u32,
            0x2306AECD_u32,
            0x6402E771_u32,
            0x00AE585A_u32,
        ];
    }
    impl ::ink::reflect::ContractDispatchableConstructors<
        { <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS },
    > for Prosopo {
        const IDS: [::core::primitive::u32; <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS] = [
            0xED4B9D1B_u32,
        ];
    }
    impl ::ink::reflect::DispatchableConstructorInfo<0xED4B9D1B_u32> for Prosopo {
        type Input = (Vec<AccountId>, u128, u128, u16, u64);
        type Output = Self;
        type Storage = Prosopo;
        type Error = <::ink::reflect::ConstructorOutputValue<
            Self,
        > as ::ink::reflect::ConstructorOutput<Prosopo>>::Error;
        const IS_RESULT: ::core::primitive::bool = <::ink::reflect::ConstructorOutputValue<
            Self,
        > as ::ink::reflect::ConstructorOutput<Prosopo>>::IS_RESULT;
        const CALLABLE: fn(Self::Input) -> Self::Output = |
            (
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
                __ink_binding_3,
                __ink_binding_4,
            )|
        {
            Prosopo::default(
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
                __ink_binding_3,
                __ink_binding_4,
            )
        };
        const PAYABLE: ::core::primitive::bool = true;
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xED_u8,
            0x4B_u8,
            0x9D_u8,
            0x1B_u8,
        ];
        const LABEL: &'static ::core::primitive::str = "default";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xF6C00565_u32> for Prosopo {
        type Input = ();
        type Output = u128;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            _|
        { Prosopo::get_provider_stake_default(storage) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xF6_u8,
            0xC0_u8,
            0x05_u8,
            0x65_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_provider_stake_default";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x76E26191_u32> for Prosopo {
        type Input = ();
        type Output = u128;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            _|
        { Prosopo::get_dapp_stake_default(storage) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x76_u8,
            0xE2_u8,
            0x61_u8,
            0x91_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_dapp_stake_default";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xC66F9A2A_u32> for Prosopo {
        type Input = (Hash, u32, Payee);
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1, __ink_binding_2)|
        {
            Prosopo::provider_register(
                storage,
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
            )
        };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xC6_u8,
            0x6F_u8,
            0x9A_u8,
            0x2A_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_register";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xD2F70DE8_u32> for Prosopo {
        type Input = (Hash, u32, Payee);
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1, __ink_binding_2)|
        {
            Prosopo::provider_update(
                storage,
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
            )
        };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xD2_u8,
            0xF7_u8,
            0x0D_u8,
            0xE8_u8,
        ];
        const PAYABLE: ::core::primitive::bool = true;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_update";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x5EFF53CF_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::provider_deregister(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x5E_u8,
            0xFF_u8,
            0x53_u8,
            0xCF_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_deregister";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x95980B6F_u32> for Prosopo {
        type Input = ();
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            _|
        { Prosopo::provider_unstake(storage) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x95_u8,
            0x98_u8,
            0x0B_u8,
            0x6F_u8,
        ];
        const PAYABLE: ::core::primitive::bool = true;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_unstake";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x75980EA7_u32> for Prosopo {
        type Input = (Hash, Hash);
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        { Prosopo::provider_add_dataset(storage, __ink_binding_0, __ink_binding_1) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x75_u8,
            0x98_u8,
            0x0E_u8,
            0xA7_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_add_dataset";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x42B45EFA_u32> for Prosopo {
        type Input = (AccountId, DappPayee);
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        { Prosopo::dapp_register(storage, __ink_binding_0, __ink_binding_1) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x42_u8,
            0xB4_u8,
            0x5E_u8,
            0xFA_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "dapp_register";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x55DA62A9_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::dapp_fund(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x55_u8,
            0xDA_u8,
            0x62_u8,
            0xA9_u8,
        ];
        const PAYABLE: ::core::primitive::bool = true;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "dapp_fund";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x3B2A7048_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::dapp_cancel(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x3B_u8,
            0x2A_u8,
            0x70_u8,
            0x48_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "dapp_cancel";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x5B965EAB_u32> for Prosopo {
        type Input = (
            AccountId,
            Hash,
            Hash,
            AccountId,
            AccountId,
            Option<CaptchaStatus>,
        );
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
                __ink_binding_3,
                __ink_binding_4,
                __ink_binding_5,
            )|
        {
            Prosopo::dapp_user_commit(
                storage,
                __ink_binding_0,
                __ink_binding_1,
                __ink_binding_2,
                __ink_binding_3,
                __ink_binding_4,
                __ink_binding_5,
            )
        };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x5B_u8,
            0x96_u8,
            0x5E_u8,
            0xAB_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "dapp_user_commit";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xD33625C0_u32> for Prosopo {
        type Input = (Hash, Balance);
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        { Prosopo::provider_approve(storage, __ink_binding_0, __ink_binding_1) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xD3_u8,
            0x36_u8,
            0x25_u8,
            0xC0_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_approve";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xB04FD5FB_u32> for Prosopo {
        type Input = Hash;
        type Output = Result<(), Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::provider_disapprove(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xB0_u8,
            0x4F_u8,
            0xD5_u8,
            0xFB_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "provider_disapprove";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xBE7B6EF9_u32> for Prosopo {
        type Input = (AccountId, u8);
        type Output = Result<bool, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        {
            Prosopo::dapp_operator_is_human_user(
                storage,
                __ink_binding_0,
                __ink_binding_1,
            )
        };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xBE_u8,
            0x7B_u8,
            0x6E_u8,
            0xF9_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "dapp_operator_is_human_user";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xBE930F18_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<LastCorrectCaptcha, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::dapp_operator_last_correct_captcha(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xBE_u8,
            0x93_u8,
            0x0F_u8,
            0x18_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "dapp_operator_last_correct_captcha";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x7A54158D_u32> for Prosopo {
        type Input = Hash;
        type Output = Result<CaptchaData, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_captcha_data(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x7A_u8,
            0x54_u8,
            0x15_u8,
            0x8D_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_captcha_data";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x42DD7F6B_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<User, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_dapp_user(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x42_u8,
            0xDD_u8,
            0x7F_u8,
            0x6B_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_dapp_user";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x812D61E2_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<Provider, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_provider_details(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x81_u8,
            0x2D_u8,
            0x61_u8,
            0xE2_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_provider_details";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xB3DFDAF9_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<Dapp, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_dapp_details(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xB3_u8,
            0xDF_u8,
            0xDA_u8,
            0xF9_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_dapp_details";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x028EBE00_u32> for Prosopo {
        type Input = Hash;
        type Output = Result<CaptchaSolutionCommitment, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_captcha_solution_commitment(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x02_u8,
            0x8E_u8,
            0xBE_u8,
            0x00_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_captcha_solution_commitment";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xF8FD5066_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<Balance, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_dapp_balance(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xF8_u8,
            0xFD_u8,
            0x50_u8,
            0x66_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_dapp_balance";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x998D522C_u32> for Prosopo {
        type Input = AccountId;
        type Output = Result<Balance, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_provider_balance(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x99_u8,
            0x8D_u8,
            0x52_u8,
            0x2C_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_provider_balance";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x84F344F6_u32> for Prosopo {
        type Input = ();
        type Output = Vec<OperatorCodeHashVote>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            _|
        { Prosopo::get_operator_code_hash_votes(storage) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x84_u8,
            0xF3_u8,
            0x44_u8,
            0xF6_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_operator_code_hash_votes";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xD542160B_u32> for Prosopo {
        type Input = Vec<AccountId>;
        type Output = Result<Vec<Provider>, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::list_providers_by_ids(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xD5_u8,
            0x42_u8,
            0x16_u8,
            0x0B_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "list_providers_by_ids";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x54B28AB4_u32> for Prosopo {
        type Input = Vec<GovernanceStatus>;
        type Output = Result<Vec<Provider>, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::list_providers_by_status(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x54_u8,
            0xB2_u8,
            0x8A_u8,
            0xB4_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "list_providers_by_status";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x4AEE5BAD_u32> for Prosopo {
        type Input = (AccountId, AccountId);
        type Output = Result<RandomProvider, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        {
            Prosopo::get_random_active_provider(
                storage,
                __ink_binding_0,
                __ink_binding_1,
            )
        };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x4A_u8,
            0xEE_u8,
            0x5B_u8,
            0xAD_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_random_active_provider";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0xD2ED90D7_u32> for Prosopo {
        type Input = ();
        type Output = Result<Vec<AccountId>, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            _|
        { Prosopo::get_all_provider_ids(storage) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0xD2_u8,
            0xED_u8,
            0x90_u8,
            0xD7_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_all_provider_ids";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x2306AECD_u32> for Prosopo {
        type Input = (u128, AccountId);
        type Output = u128;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            (__ink_binding_0, __ink_binding_1)|
        { Prosopo::get_random_number(storage, __ink_binding_0, __ink_binding_1) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x23_u8,
            0x06_u8,
            0xAE_u8,
            0xCD_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_random_number";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x6402E771_u32> for Prosopo {
        type Input = u128;
        type Output = u128;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::get_random_number_caller(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x64_u8,
            0x02_u8,
            0xE7_u8,
            0x71_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = false;
        const LABEL: &'static ::core::primitive::str = "get_random_number_caller";
    }
    impl ::ink::reflect::DispatchableMessageInfo<0x00AE585A_u32> for Prosopo {
        type Input = [u8; 32];
        type Output = Result<bool, Error>;
        type Storage = Prosopo;
        const CALLABLE: fn(&mut Self::Storage, Self::Input) -> Self::Output = |
            storage,
            __ink_binding_0|
        { Prosopo::operator_set_code(storage, __ink_binding_0) };
        const SELECTOR: [::core::primitive::u8; 4usize] = [
            0x00_u8,
            0xAE_u8,
            0x58_u8,
            0x5A_u8,
        ];
        const PAYABLE: ::core::primitive::bool = false;
        const MUTATES: ::core::primitive::bool = true;
        const LABEL: &'static ::core::primitive::str = "operator_set_code";
    }
    const _: () = {
        #[allow(non_camel_case_types)]
        pub enum __ink_ConstructorDecoder {
            Constructor0(
                <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                            },
                        >>::IDS[0usize]
                    },
                >>::Input,
            ),
        }
        impl ::ink::reflect::DecodeDispatch for __ink_ConstructorDecoder {
            fn decode_dispatch<I>(
                input: &mut I,
            ) -> ::core::result::Result<Self, ::ink::reflect::DispatchError>
            where
                I: ::scale::Input,
            {
                const CONSTRUCTOR_0: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                            },
                        >>::IDS[0usize]
                    },
                >>::SELECTOR;
                match <[::core::primitive::u8; 4usize] as ::scale::Decode>::decode(input)
                    .map_err(|_| ::ink::reflect::DispatchError::InvalidSelector)?
                {
                    CONSTRUCTOR_0 => {
                        ::core::result::Result::Ok(
                            Self::Constructor0(
                                <<Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    _invalid => {
                        ::core::result::Result::Err(
                            ::ink::reflect::DispatchError::UnknownSelector,
                        )
                    }
                }
            }
        }
        impl ::scale::Decode for __ink_ConstructorDecoder {
            fn decode<I>(input: &mut I) -> ::core::result::Result<Self, ::scale::Error>
            where
                I: ::scale::Input,
            {
                <Self as ::ink::reflect::DecodeDispatch>::decode_dispatch(input)
                    .map_err(::core::convert::Into::into)
            }
        }
        impl ::ink::reflect::ExecuteDispatchable for __ink_ConstructorDecoder {
            #[allow(clippy::nonminimal_bool)]
            fn execute_dispatchable(
                self,
            ) -> ::core::result::Result<(), ::ink::reflect::DispatchError> {
                match self {
                    Self::Constructor0(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                        },
                                    >>::IDS[0usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                    },
                                >>::IDS[0usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                    },
                                >>::IDS[0usize]
                            },
                        >>::CALLABLE(input);
                        let output_value = ::ink::reflect::ConstructorOutputValue::new(
                            result,
                        );
                        let output_result = <::ink::reflect::ConstructorOutputValue<
                            <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                        },
                                    >>::IDS[0usize]
                                },
                            >>::Output,
                        > as ::ink::reflect::ConstructorOutput<
                            Prosopo,
                        >>::as_result(&output_value);
                        if let ::core::result::Result::Ok(contract)
                            = output_result.as_ref()
                        {
                            ::ink::env::set_contract_storage::<
                                ::ink::primitives::Key,
                                Prosopo,
                            >(
                                &<Prosopo as ::ink::storage::traits::StorageKey>::KEY,
                                contract,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::ConstructorResult<
                                ::core::result::Result<
                                    (),
                                    &<::ink::reflect::ConstructorOutputValue<
                                        <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                            {
                                                <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                                    {
                                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                                    },
                                                >>::IDS[0usize]
                                            },
                                        >>::Output,
                                    > as ::ink::reflect::ConstructorOutput<Prosopo>>::Error,
                                >,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(
                                output_result.is_err(),
                            ),
                            &::ink::ConstructorResult::Ok(output_result.map(|_| ())),
                        );
                    }
                }
            }
        }
        impl ::ink::reflect::ContractConstructorDecoder for Prosopo {
            type Type = __ink_ConstructorDecoder;
        }
    };
    const _: () = {
        #[allow(non_camel_case_types)]
        pub enum __ink_MessageDecoder {
            Message0(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[0usize]
                    },
                >>::Input,
            ),
            Message1(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[1usize]
                    },
                >>::Input,
            ),
            Message2(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[2usize]
                    },
                >>::Input,
            ),
            Message3(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[3usize]
                    },
                >>::Input,
            ),
            Message4(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[4usize]
                    },
                >>::Input,
            ),
            Message5(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[5usize]
                    },
                >>::Input,
            ),
            Message6(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[6usize]
                    },
                >>::Input,
            ),
            Message7(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[7usize]
                    },
                >>::Input,
            ),
            Message8(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[8usize]
                    },
                >>::Input,
            ),
            Message9(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[9usize]
                    },
                >>::Input,
            ),
            Message10(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[10usize]
                    },
                >>::Input,
            ),
            Message11(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[11usize]
                    },
                >>::Input,
            ),
            Message12(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[12usize]
                    },
                >>::Input,
            ),
            Message13(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[13usize]
                    },
                >>::Input,
            ),
            Message14(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[14usize]
                    },
                >>::Input,
            ),
            Message15(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[15usize]
                    },
                >>::Input,
            ),
            Message16(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[16usize]
                    },
                >>::Input,
            ),
            Message17(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[17usize]
                    },
                >>::Input,
            ),
            Message18(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[18usize]
                    },
                >>::Input,
            ),
            Message19(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[19usize]
                    },
                >>::Input,
            ),
            Message20(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[20usize]
                    },
                >>::Input,
            ),
            Message21(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[21usize]
                    },
                >>::Input,
            ),
            Message22(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[22usize]
                    },
                >>::Input,
            ),
            Message23(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[23usize]
                    },
                >>::Input,
            ),
            Message24(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[24usize]
                    },
                >>::Input,
            ),
            Message25(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[25usize]
                    },
                >>::Input,
            ),
            Message26(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[26usize]
                    },
                >>::Input,
            ),
            Message27(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[27usize]
                    },
                >>::Input,
            ),
            Message28(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[28usize]
                    },
                >>::Input,
            ),
            Message29(
                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[29usize]
                    },
                >>::Input,
            ),
        }
        impl ::ink::reflect::DecodeDispatch for __ink_MessageDecoder {
            fn decode_dispatch<I>(
                input: &mut I,
            ) -> ::core::result::Result<Self, ::ink::reflect::DispatchError>
            where
                I: ::scale::Input,
            {
                const MESSAGE_0: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[0usize]
                    },
                >>::SELECTOR;
                const MESSAGE_1: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[1usize]
                    },
                >>::SELECTOR;
                const MESSAGE_2: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[2usize]
                    },
                >>::SELECTOR;
                const MESSAGE_3: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[3usize]
                    },
                >>::SELECTOR;
                const MESSAGE_4: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[4usize]
                    },
                >>::SELECTOR;
                const MESSAGE_5: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[5usize]
                    },
                >>::SELECTOR;
                const MESSAGE_6: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[6usize]
                    },
                >>::SELECTOR;
                const MESSAGE_7: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[7usize]
                    },
                >>::SELECTOR;
                const MESSAGE_8: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[8usize]
                    },
                >>::SELECTOR;
                const MESSAGE_9: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[9usize]
                    },
                >>::SELECTOR;
                const MESSAGE_10: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[10usize]
                    },
                >>::SELECTOR;
                const MESSAGE_11: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[11usize]
                    },
                >>::SELECTOR;
                const MESSAGE_12: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[12usize]
                    },
                >>::SELECTOR;
                const MESSAGE_13: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[13usize]
                    },
                >>::SELECTOR;
                const MESSAGE_14: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[14usize]
                    },
                >>::SELECTOR;
                const MESSAGE_15: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[15usize]
                    },
                >>::SELECTOR;
                const MESSAGE_16: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[16usize]
                    },
                >>::SELECTOR;
                const MESSAGE_17: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[17usize]
                    },
                >>::SELECTOR;
                const MESSAGE_18: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[18usize]
                    },
                >>::SELECTOR;
                const MESSAGE_19: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[19usize]
                    },
                >>::SELECTOR;
                const MESSAGE_20: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[20usize]
                    },
                >>::SELECTOR;
                const MESSAGE_21: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[21usize]
                    },
                >>::SELECTOR;
                const MESSAGE_22: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[22usize]
                    },
                >>::SELECTOR;
                const MESSAGE_23: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[23usize]
                    },
                >>::SELECTOR;
                const MESSAGE_24: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[24usize]
                    },
                >>::SELECTOR;
                const MESSAGE_25: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[25usize]
                    },
                >>::SELECTOR;
                const MESSAGE_26: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[26usize]
                    },
                >>::SELECTOR;
                const MESSAGE_27: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[27usize]
                    },
                >>::SELECTOR;
                const MESSAGE_28: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[28usize]
                    },
                >>::SELECTOR;
                const MESSAGE_29: [::core::primitive::u8; 4usize] = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                    {
                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                            {
                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                            },
                        >>::IDS[29usize]
                    },
                >>::SELECTOR;
                match <[::core::primitive::u8; 4usize] as ::scale::Decode>::decode(input)
                    .map_err(|_| ::ink::reflect::DispatchError::InvalidSelector)?
                {
                    MESSAGE_0 => {
                        ::core::result::Result::Ok(
                            Self::Message0(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_1 => {
                        ::core::result::Result::Ok(
                            Self::Message1(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_2 => {
                        ::core::result::Result::Ok(
                            Self::Message2(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_3 => {
                        ::core::result::Result::Ok(
                            Self::Message3(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_4 => {
                        ::core::result::Result::Ok(
                            Self::Message4(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_5 => {
                        ::core::result::Result::Ok(
                            Self::Message5(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_6 => {
                        ::core::result::Result::Ok(
                            Self::Message6(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_7 => {
                        ::core::result::Result::Ok(
                            Self::Message7(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_8 => {
                        ::core::result::Result::Ok(
                            Self::Message8(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_9 => {
                        ::core::result::Result::Ok(
                            Self::Message9(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_10 => {
                        ::core::result::Result::Ok(
                            Self::Message10(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_11 => {
                        ::core::result::Result::Ok(
                            Self::Message11(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_12 => {
                        ::core::result::Result::Ok(
                            Self::Message12(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_13 => {
                        ::core::result::Result::Ok(
                            Self::Message13(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_14 => {
                        ::core::result::Result::Ok(
                            Self::Message14(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_15 => {
                        ::core::result::Result::Ok(
                            Self::Message15(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_16 => {
                        ::core::result::Result::Ok(
                            Self::Message16(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_17 => {
                        ::core::result::Result::Ok(
                            Self::Message17(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_18 => {
                        ::core::result::Result::Ok(
                            Self::Message18(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_19 => {
                        ::core::result::Result::Ok(
                            Self::Message19(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_20 => {
                        ::core::result::Result::Ok(
                            Self::Message20(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_21 => {
                        ::core::result::Result::Ok(
                            Self::Message21(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_22 => {
                        ::core::result::Result::Ok(
                            Self::Message22(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_23 => {
                        ::core::result::Result::Ok(
                            Self::Message23(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_24 => {
                        ::core::result::Result::Ok(
                            Self::Message24(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_25 => {
                        ::core::result::Result::Ok(
                            Self::Message25(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_26 => {
                        ::core::result::Result::Ok(
                            Self::Message26(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_27 => {
                        ::core::result::Result::Ok(
                            Self::Message27(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_28 => {
                        ::core::result::Result::Ok(
                            Self::Message28(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    MESSAGE_29 => {
                        ::core::result::Result::Ok(
                            Self::Message29(
                                <<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::Input as ::scale::Decode>::decode(input)
                                    .map_err(|_| {
                                        ::ink::reflect::DispatchError::InvalidParameters
                                    })?,
                            ),
                        )
                    }
                    _invalid => {
                        ::core::result::Result::Err(
                            ::ink::reflect::DispatchError::UnknownSelector,
                        )
                    }
                }
            }
        }
        impl ::scale::Decode for __ink_MessageDecoder {
            fn decode<I>(input: &mut I) -> ::core::result::Result<Self, ::scale::Error>
            where
                I: ::scale::Input,
            {
                <Self as ::ink::reflect::DecodeDispatch>::decode_dispatch(input)
                    .map_err(::core::convert::Into::into)
            }
        }
        fn push_contract(contract: ::core::mem::ManuallyDrop<Prosopo>, mutates: bool) {
            if mutates {
                ::ink::env::set_contract_storage::<
                    ::ink::primitives::Key,
                    Prosopo,
                >(&<Prosopo as ::ink::storage::traits::StorageKey>::KEY, &contract);
            }
        }
        impl ::ink::reflect::ExecuteDispatchable for __ink_MessageDecoder {
            #[allow(clippy::nonminimal_bool, clippy::let_unit_value)]
            fn execute_dispatchable(
                self,
            ) -> ::core::result::Result<(), ::ink::reflect::DispatchError> {
                let key = <Prosopo as ::ink::storage::traits::StorageKey>::KEY;
                let mut contract: ::core::mem::ManuallyDrop<Prosopo> = ::core::mem::ManuallyDrop::new(
                    match ::ink::env::get_contract_storage(&key) {
                        ::core::result::Result::Ok(
                            ::core::option::Option::Some(value),
                        ) => value,
                        ::core::result::Result::Ok(::core::option::Option::None) => {
                            ::core::panicking::panic_fmt(
                                format_args!("storage entry was empty"),
                            )
                        }
                        ::core::result::Result::Err(_) => {
                            ::core::panicking::panic_fmt(
                                format_args!("could not properly decode storage entry"),
                            )
                        }
                    },
                );
                match self {
                    Self::Message0(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[0usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[0usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[0usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message1(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[1usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[1usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[1usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message2(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[2usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[2usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[2usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message3(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[3usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[3usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[3usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message4(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[4usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[4usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[4usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message5(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[5usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[5usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[5usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message6(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[6usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[6usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[6usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message7(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[7usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[7usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[7usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message8(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[8usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[8usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[8usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message9(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[9usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[9usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[9usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message10(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[10usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[10usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[10usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message11(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[11usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[11usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[11usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message12(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[12usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[12usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[12usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message13(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[13usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[13usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[13usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message14(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[14usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[14usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[14usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message15(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[15usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[15usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[15usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message16(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[16usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[16usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[16usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message17(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[17usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[17usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[17usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message18(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[18usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[18usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[18usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message19(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[19usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[19usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[19usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message20(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[20usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[20usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[20usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message21(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[21usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[21usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[21usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message22(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[22usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[22usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[22usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message23(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[23usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[23usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[23usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message24(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[24usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[24usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[24usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message25(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[25usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[25usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[25usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message26(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[26usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[26usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[26usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message27(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[27usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[27usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[27usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message28(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[28usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[28usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[28usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                    Self::Message29(input) => {
                        if {
                            false
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[0usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[1usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[2usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[3usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[4usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[5usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[6usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[7usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[8usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[9usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[10usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[11usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[12usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[13usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[14usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[15usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[16usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[17usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[18usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[19usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[20usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[21usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[22usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[23usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[24usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[25usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[26usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[27usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[28usize]
                                    },
                                >>::PAYABLE
                                || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::PAYABLE
                        }
                            && !<Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                {
                                    <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                        {
                                            <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                        },
                                    >>::IDS[29usize]
                                },
                            >>::PAYABLE
                        {
                            ::ink::codegen::deny_payment::<
                                <Prosopo as ::ink::env::ContractEnv>::Env,
                            >()?;
                        }
                        let result: <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[29usize]
                            },
                        >>::Output = <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                            {
                                <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                    {
                                        <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                    },
                                >>::IDS[29usize]
                            },
                        >>::CALLABLE(&mut contract, input);
                        let is_reverted = {
                            #[allow(unused_imports)]
                            use ::ink::result_info::IsResultTypeFallback as _;
                            ::ink::result_info::IsResultType::<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::Output,
                            >::VALUE
                        }
                            && {
                                #[allow(unused_imports)]
                                use ::ink::result_info::IsResultErrFallback as _;
                                ::ink::result_info::IsResultErr(&result).value()
                            };
                        if !is_reverted {
                            push_contract(
                                contract,
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::MUTATES,
                            );
                        }
                        ::ink::env::return_value::<
                            ::ink::MessageResult<
                                <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                                    {
                                        <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                            {
                                                <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                            },
                                        >>::IDS[29usize]
                                    },
                                >>::Output,
                            >,
                        >(
                            ::ink::env::ReturnFlags::new_with_reverted(is_reverted),
                            &::ink::MessageResult::Ok(result),
                        )
                    }
                };
            }
        }
        impl ::ink::reflect::ContractMessageDecoder for Prosopo {
            type Type = __ink_MessageDecoder;
        }
    };
    #[cfg(not(test))]
    #[cfg(not(feature = "ink-as-dependency"))]
    const _: () = {
        #[cfg(not(test))]
        #[no_mangle]
        #[allow(clippy::nonminimal_bool)]
        fn deploy() {
            if !{
                false
                    || <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableConstructors<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::CONSTRUCTORS
                                },
                            >>::IDS[0usize]
                        },
                    >>::PAYABLE
            } {
                ::ink::codegen::deny_payment::<
                    <Prosopo as ::ink::env::ContractEnv>::Env,
                >()
                    .unwrap_or_else(|error| ::core::panicking::panic_display(&error))
            }
            let dispatchable = match ::ink::env::decode_input::<
                <Prosopo as ::ink::reflect::ContractConstructorDecoder>::Type,
            >() {
                ::core::result::Result::Ok(decoded_dispatchable) => decoded_dispatchable,
                ::core::result::Result::Err(_decoding_error) => {
                    let error = ::ink::ConstructorResult::Err(
                        ::ink::LangError::CouldNotReadInput,
                    );
                    ::ink::env::return_value::<
                        ::ink::ConstructorResult<()>,
                    >(::ink::env::ReturnFlags::new_with_reverted(true), &error);
                }
            };
            <<Prosopo as ::ink::reflect::ContractConstructorDecoder>::Type as ::ink::reflect::ExecuteDispatchable>::execute_dispatchable(
                    dispatchable,
                )
                .unwrap_or_else(|error| {
                    ::core::panicking::panic_fmt(
                        format_args!("dispatching ink! message failed: {0}", error),
                    )
                })
        }
        #[cfg(not(test))]
        #[no_mangle]
        #[allow(clippy::nonminimal_bool)]
        fn call() {
            if !{
                false
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[0usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[1usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[2usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[3usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[4usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[5usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[6usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[7usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[8usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[9usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[10usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[11usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[12usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[13usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[14usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[15usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[16usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[17usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[18usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[19usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[20usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[21usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[22usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[23usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[24usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[25usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[26usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[27usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[28usize]
                        },
                    >>::PAYABLE
                    || <Prosopo as ::ink::reflect::DispatchableMessageInfo<
                        {
                            <Prosopo as ::ink::reflect::ContractDispatchableMessages<
                                {
                                    <Prosopo as ::ink::reflect::ContractAmountDispatchables>::MESSAGES
                                },
                            >>::IDS[29usize]
                        },
                    >>::PAYABLE
            } {
                ::ink::codegen::deny_payment::<
                    <Prosopo as ::ink::env::ContractEnv>::Env,
                >()
                    .unwrap_or_else(|error| ::core::panicking::panic_display(&error))
            }
            let dispatchable = match ::ink::env::decode_input::<
                <Prosopo as ::ink::reflect::ContractMessageDecoder>::Type,
            >() {
                ::core::result::Result::Ok(decoded_dispatchable) => decoded_dispatchable,
                ::core::result::Result::Err(_decoding_error) => {
                    let error = ::ink::MessageResult::Err(
                        ::ink::LangError::CouldNotReadInput,
                    );
                    ::ink::env::return_value::<
                        ::ink::MessageResult<()>,
                    >(::ink::env::ReturnFlags::new_with_reverted(true), &error);
                }
            };
            <<Prosopo as ::ink::reflect::ContractMessageDecoder>::Type as ::ink::reflect::ExecuteDispatchable>::execute_dispatchable(
                    dispatchable,
                )
                .unwrap_or_else(|error| {
                    ::core::panicking::panic_fmt(
                        format_args!("dispatching ink! message failed: {0}", error),
                    )
                })
        }
    };
    const _: () = {
        use ::ink::codegen::{Env as _, StaticEnv as _};
        use ::ink::codegen::EmitEvent as _;
        const _: ::ink::codegen::utils::IsSameType<Prosopo> = ::ink::codegen::utils::IsSameType::<
            Prosopo,
        >::new();
        impl Prosopo {
            /// Constructor
            #[cfg(not(feature = "__ink_dylint_Constructor"))]
            pub fn default(
                operator_accounts: Vec<AccountId>,
                provider_stake_default: u128,
                dapp_stake_default: u128,
                max_user_history_len: u16,
                max_user_history_age: u64,
            ) -> Self {
                if operator_accounts.len() < 2 {
                    ::core::panicking::panic_fmt(
                        format_args!("{0:?}", Error::MinimumTwoOperatorsRequired),
                    )
                }
                let mut operators = Mapping::new();
                let mut operator_accounts_lazy = Lazy::new();
                for operator_account in operator_accounts.iter() {
                    let operator = Operator {
                        status: GovernanceStatus::Active,
                    };
                    operators.insert(operator_account, &operator);
                    operator_accounts_lazy.set(&operator_accounts);
                }
                Self {
                    providers: Default::default(),
                    provider_accounts: Default::default(),
                    service_origins: Default::default(),
                    captcha_data: Default::default(),
                    operator_accounts: operator_accounts_lazy,
                    operator_stake_default: 0,
                    operator_fee_currency: Default::default(),
                    dapp_users: Default::default(),
                    operators,
                    provider_stake_default,
                    dapp_stake_default,
                    dapps: Default::default(),
                    dapp_accounts: Default::default(),
                    dapp_user_accounts: Default::default(),
                    operator_code_hash_votes: Default::default(),
                    max_user_history_len,
                    max_user_history_age,
                    captcha_solution_commitments: Default::default(),
                }
            }
            /// Get contract provider minimum stake default.
            pub fn get_provider_stake_default(&self) -> u128 {
                self.provider_stake_default
            }
            /// Get contract dapp minimum stake default.
            pub fn get_dapp_stake_default(&self) -> u128 {
                self.dapp_stake_default
            }
            /// Register a provider, their service origin and fee
            pub fn provider_register(
                &mut self,
                service_origin: Hash,
                fee: u32,
                payee: Payee,
            ) -> Result<(), Error> {
                return Err(Error::FunctionDisabled);
                let provider_account = self.env().caller();
                if self.providers.get(provider_account).is_some() {
                    return {
                        Err(
                            (&self).print_err(Error::ProviderExists, "provider_register"),
                        )
                    };
                }
                if self.service_origins.get(service_origin).is_some() {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::ProviderServiceOriginUsed,
                                    "provider_register",
                                ),
                        )
                    };
                }
                let balance: u128 = 0;
                let provider = Provider {
                    status: GovernanceStatus::Deactivated,
                    balance,
                    fee,
                    service_origin,
                    dataset_id: Hash::default(),
                    dataset_id_content: Hash::default(),
                    payee,
                };
                self.providers.insert(provider_account, &provider);
                self.service_origins.insert(service_origin, &());
                let mut provider_accounts_map = self
                    .provider_accounts
                    .get(ProviderState {
                        status: GovernanceStatus::Deactivated,
                        payee,
                    })
                    .unwrap_or_default();
                provider_accounts_map.insert(provider_account);
                self.provider_accounts
                    .insert(
                        ProviderState {
                            status: GovernanceStatus::Deactivated,
                            payee,
                        },
                        &provider_accounts_map,
                    );
                self.env()
                    .emit_event(ProviderRegister {
                        account: provider_account,
                    });
                Ok(())
            }
            /// Update an existing provider, their service origin, fee and deposit funds
            pub fn provider_update(
                &mut self,
                service_origin: Hash,
                fee: u32,
                payee: Payee,
            ) -> Result<(), Error> {
                let provider_account = self.env().caller();
                if self.providers.get(provider_account).is_none() {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::ProviderDoesNotExist, "provider_update"),
                        )
                    };
                }
                let existing = self.get_provider_details(provider_account)?;
                if existing.service_origin != service_origin {
                    if self.service_origins.get(service_origin).is_some() {
                        return {
                            Err(
                                (&self)
                                    .print_err(
                                        Error::ProviderServiceOriginUsed,
                                        "provider_update",
                                    ),
                            )
                        };
                    } else {
                        self.service_origins.remove(existing.service_origin);
                        self.service_origins.insert(service_origin, &());
                    }
                }
                let old_status = existing.status;
                let mut new_status = existing.status;
                let balance = existing.balance + self.env().transferred_value();
                if balance >= self.provider_stake_default
                    && existing.dataset_id != Hash::default()
                {
                    new_status = GovernanceStatus::Active;
                }
                let provider = Provider {
                    status: new_status,
                    balance,
                    fee,
                    service_origin,
                    dataset_id: existing.dataset_id,
                    dataset_id_content: existing.dataset_id_content,
                    payee,
                };
                self.provider_change_status(
                    provider_account,
                    old_status,
                    new_status,
                    payee,
                );
                self.providers.insert(provider_account, &provider);
                self.env()
                    .emit_event(ProviderUpdate {
                        account: provider_account,
                    });
                Ok(())
            }
            /// De-Register a provider by setting their status to Deactivated
            pub fn provider_deregister(
                &mut self,
                provider_account: AccountId,
            ) -> Result<(), Error> {
                let caller = self.env().caller();
                if caller != provider_account {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::NotAuthorised, "provider_deregister"),
                        )
                    };
                }
                let mut provider = self
                    .providers
                    .get(provider_account)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::ProviderDoesNotExist,
                                "provider_deregister",
                            )
                    })?;
                self.provider_change_status(
                    provider_account,
                    provider.status,
                    GovernanceStatus::Deactivated,
                    provider.payee,
                );
                provider.status = GovernanceStatus::Deactivated;
                self.providers.insert(provider_account, &provider);
                self.env()
                    .emit_event(ProviderDeregister {
                        account: provider_account,
                    });
                Ok(())
            }
            /// Unstake and deactivate the provider's service, returning stake
            pub fn provider_unstake(&mut self) -> Result<(), Error> {
                let caller = self.env().caller();
                if self.providers.get(caller).is_none() {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::ProviderDoesNotExist, "provider_unstake"),
                        )
                    };
                }
                let provider = self.get_provider_details(caller)?;
                let balance = provider.balance;
                if balance > 0 {
                    self.env()
                        .transfer(caller, balance)
                        .map_err(|_| Error::ContractTransferFailed)?;
                    self.provider_deregister(caller)?;
                    self.env()
                        .emit_event(ProviderUnstake {
                            account: caller,
                            value: balance,
                        });
                }
                Ok(())
            }
            /// Add a new data set
            pub fn provider_add_dataset(
                &mut self,
                dataset_id: Hash,
                dataset_id_content: Hash,
            ) -> Result<(), Error> {
                if dataset_id == dataset_id_content {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::DatasetIdSolutionsSame,
                                    "provider_add_dataset",
                                ),
                        )
                    };
                }
                let provider_id = self.env().caller();
                self.validate_provider_exists_and_has_funds(provider_id)?;
                let dataset = CaptchaData {
                    provider: provider_id,
                    dataset_id,
                    dataset_id_content,
                    captcha_type: 0,
                };
                let mut provider = self
                    .providers
                    .get(provider_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::ProviderDoesNotExist,
                                "provider_add_dataset",
                            )
                    })?;
                let dataset_id_old = provider.dataset_id;
                if self.captcha_data.get(dataset_id).is_none() {
                    self.captcha_data.insert(dataset_id, &dataset);
                    self.captcha_data.remove(dataset_id_old);
                }
                provider.dataset_id = dataset_id;
                provider.dataset_id_content = dataset_id_content;
                let old_status = provider.status;
                if provider.status != GovernanceStatus::Active
                    && provider.balance >= self.provider_stake_default
                    && dataset_id != Hash::default()
                {
                    provider.status = GovernanceStatus::Active;
                    self.provider_change_status(
                        provider_id,
                        old_status,
                        provider.status,
                        provider.payee,
                    );
                }
                self.providers.insert(provider_id, &provider);
                self.env()
                    .emit_event(ProviderAddDataset {
                        account: provider_id,
                        dataset_id,
                        dataset_id_content,
                    });
                Ok(())
            }
            /// Register a dapp
            pub fn dapp_register(
                &mut self,
                contract: AccountId,
                payee: DappPayee,
            ) -> Result<(), Error> {
                if !self.env().is_contract(&contract) {
                    ::ink_env::debug_message(
                        &{
                            let res = ::alloc::fmt::format(
                                format_args!(
                                    "{0}\n", { let res =
                                    ::alloc::fmt::format(format_args!("Contract is not a contract"));
                                    res }
                                ),
                            );
                            res
                        },
                    );
                    return {
                        Err((&self).print_err(Error::InvalidContract, "dapp_register"))
                    };
                }
                let caller = self.env().caller();
                let owner = caller;
                let transferred = self.env().transferred_value();
                if self.dapps.get(contract).is_some() {
                    return self.dapp_update(owner, transferred, contract, caller, payee);
                }
                let status = if transferred >= self.dapp_stake_default {
                    GovernanceStatus::Active
                } else {
                    GovernanceStatus::Suspended
                };
                let dapp = Dapp {
                    status,
                    balance: transferred,
                    owner,
                    min_difficulty: 1,
                    payee,
                };
                self.dapps.insert(contract, &dapp);
                let mut dapp_accounts = self.dapp_accounts.get_or_default();
                dapp_accounts.push(contract);
                self.dapp_accounts.set(&dapp_accounts);
                self.env()
                    .emit_event(DappRegister {
                        contract,
                        owner,
                        value: transferred,
                        payee,
                        status,
                    });
                Ok(())
            }
            /// Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps
            pub fn dapp_fund(&mut self, contract: AccountId) -> Result<(), Error> {
                let transferred = self.env().transferred_value();
                if self.dapps.get(contract).is_none() {
                    return {
                        Err((&self).print_err(Error::DappDoesNotExist, "dapp_fund"))
                    };
                }
                let mut dapp = self
                    .dapps
                    .get(contract)
                    .ok_or_else(|| {
                        (&self).print_err(Error::DappDoesNotExist, "dapp_fund")
                    })?;
                let total = dapp.balance + transferred;
                dapp.balance = total;
                if dapp.balance > 0 {
                    dapp.status = GovernanceStatus::Active;
                    self.env().emit_event(DappFund { contract, value: total });
                } else {
                    dapp.status = GovernanceStatus::Suspended;
                }
                self.dapps.insert(contract, &dapp);
                Ok(())
            }
            /// Cancel services as a dapp, returning remaining tokens
            pub fn dapp_cancel(&mut self, contract: AccountId) -> Result<(), Error> {
                let caller = self.env().caller();
                if self.dapps.get(contract).is_none() {
                    return {
                        Err((&self).print_err(Error::DappDoesNotExist, "dapp_cancel"))
                    };
                }
                let mut dapp = self.get_dapp_details(contract)?;
                if dapp.owner != caller {
                    return {
                        Err((&self).print_err(Error::NotAuthorised, "dapp_cancel"))
                    };
                }
                let balance = dapp.balance;
                if dapp.balance > 0 {
                    self.env()
                        .transfer(caller, dapp.balance)
                        .map_err(|_| Error::ContractTransferFailed)?;
                }
                dapp.status = GovernanceStatus::Deactivated;
                dapp.balance = 0;
                self.dapps.insert(contract, &dapp);
                self.env()
                    .emit_event(DappCancel {
                        contract,
                        value: balance,
                    });
                Ok(())
            }
            /// Submit a captcha solution commit
            pub fn dapp_user_commit(
                &mut self,
                contract: AccountId,
                dataset_id: Hash,
                user_merkle_tree_root: Hash,
                provider: AccountId,
                dapp_user: AccountId,
                status_option: Option<CaptchaStatus>,
            ) -> Result<(), Error> {
                let caller = self.env().caller();
                if self.dapps.get(caller).is_some() {
                    return {
                        Err((&self).print_err(Error::NotAuthorised, "dapp_user_commit"))
                    };
                }
                self.get_captcha_data(dataset_id)?;
                if self.captcha_solution_commitments.get(user_merkle_tree_root).is_some()
                {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::CaptchaSolutionCommitmentExists,
                                    "dapp_user_commit",
                                ),
                        )
                    };
                }
                self.validate_dapp(contract)?;
                self.validate_provider_active(provider)?;
                let commitment = CaptchaSolutionCommitment {
                    account: dapp_user,
                    dataset_id,
                    status: CaptchaStatus::Pending,
                    contract,
                    provider,
                    completed_at: self.env().block_timestamp(),
                };
                self.record_commitment(dapp_user, user_merkle_tree_root, commitment);
                let provider_details = self.get_provider_details(caller);
                if provider_details.ok().is_some() {
                    if caller != provider {
                        ::ink_env::debug_message(
                            &{
                                let res = ::alloc::fmt::format(
                                    format_args!(
                                        "{0}\n", { let res =
                                        ::alloc::fmt::format(format_args!("{0}", "NotAuthorised"));
                                        res }
                                    ),
                                );
                                res
                            },
                        );
                        return {
                            Err(
                                (&self).print_err(Error::NotAuthorised, "dapp_user_commit"),
                            )
                        };
                    }
                    match status_option.unwrap_or(CaptchaStatus::Pending) {
                        CaptchaStatus::Approved => {
                            self.provider_approve(user_merkle_tree_root, 0)?
                        }
                        CaptchaStatus::Disapproved => {
                            self.provider_disapprove(user_merkle_tree_root)?
                        }
                        _ => {}
                    }
                }
                self.env()
                    .emit_event(DappUserCommit {
                        account: caller,
                        merkle_tree_root: user_merkle_tree_root,
                        contract,
                        dataset_id,
                    });
                Ok(())
            }
            /// Approve a solution commitment, increment correct captchas, and refund the users tx fee
            pub fn provider_approve(
                &mut self,
                captcha_solution_commitment_id: Hash,
                transaction_fee: Balance,
            ) -> Result<(), Error> {
                let caller = self.env().caller();
                self.validate_provider_active(caller)?;
                let mut commitment = self
                    .captcha_solution_commitments
                    .get(captcha_solution_commitment_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::CaptchaSolutionCommitmentDoesNotExist,
                                "provider_approve",
                            )
                    })?;
                if commitment.provider != caller {
                    return {
                        Err((&self).print_err(Error::NotAuthorised, "provider_approve"))
                    };
                }
                self.validate_dapp(commitment.contract)?;
                if commitment.status == CaptchaStatus::Pending {
                    commitment.status = CaptchaStatus::Approved;
                    self.record_commitment(
                        commitment.account,
                        captcha_solution_commitment_id,
                        commitment,
                    );
                    self.pay_fee(&caller, &commitment.contract)?;
                    self.refund_transaction_fee(commitment, transaction_fee)?;
                    self.env()
                        .emit_event(ProviderApprove {
                            captcha_solution_commitment_id,
                        });
                } else {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::CaptchaSolutionCommitmentAlreadyApproved,
                                    "provider_approve",
                                ),
                        )
                    };
                }
                Ok(())
            }
            /// Disapprove a solution commitment and increment incorrect captchas
            pub fn provider_disapprove(
                &mut self,
                captcha_solution_commitment_id: Hash,
            ) -> Result<(), Error> {
                let caller = self.env().caller();
                self.validate_provider_active(caller)?;
                let mut commitment = self
                    .captcha_solution_commitments
                    .get(captcha_solution_commitment_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::CaptchaSolutionCommitmentDoesNotExist,
                                "provider_disapprove",
                            )
                    })?;
                if commitment.provider != caller {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::NotAuthorised, "provider_disapprove"),
                        )
                    };
                }
                self.validate_dapp(commitment.contract)?;
                if commitment.status == CaptchaStatus::Pending {
                    commitment.status = CaptchaStatus::Disapproved;
                    self.record_commitment(
                        commitment.account,
                        captcha_solution_commitment_id,
                        commitment,
                    );
                    self.pay_fee(&caller, &commitment.contract)?;
                    self.env()
                        .emit_event(ProviderDisapprove {
                            captcha_solution_commitment_id,
                        });
                } else {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::CaptchaSolutionCommitmentAlreadyDisapproved,
                                    "provider_disapprove",
                                ),
                        )
                    };
                }
                Ok(())
            }
            /// Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)
            /// Threshold is decided by the calling user
            pub fn dapp_operator_is_human_user(
                &self,
                user: AccountId,
                threshold: u8,
            ) -> Result<bool, Error> {
                Ok(self.get_user_history_summary(user)?.score > threshold)
            }
            pub fn dapp_operator_last_correct_captcha(
                &self,
                user: AccountId,
            ) -> Result<LastCorrectCaptcha, Error> {
                let user = self.get_dapp_user(user)?;
                let (history, _expired) = self.trim_user_history(user.history);
                let mut last_correct_captcha = None;
                for hash in history {
                    let entry = self.captcha_solution_commitments.get(hash).unwrap();
                    if entry.status == CaptchaStatus::Approved {
                        last_correct_captcha = Some(entry);
                        break;
                    }
                }
                if last_correct_captcha.is_none() {
                    return Err(Error::NoCorrectCaptcha);
                }
                Ok(LastCorrectCaptcha {
                    before_ms: self.env().block_timestamp()
                        - last_correct_captcha.unwrap().completed_at,
                    dapp_id: last_correct_captcha.unwrap().contract,
                })
            }
            /// Get a single captcha dataset
            ///
            /// Returns an error if the dapp does not exist
            pub fn get_captcha_data(
                &self,
                dataset_id: Hash,
            ) -> Result<CaptchaData, Error> {
                self.captcha_data
                    .get(dataset_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::CaptchaDataDoesNotExist,
                                "get_captcha_data",
                            )
                    })
            }
            /// Get a dapp user
            ///
            /// Returns an error if the user does not exist
            pub fn get_dapp_user(&self, dapp_user_id: AccountId) -> Result<User, Error> {
                self.dapp_users
                    .get(dapp_user_id)
                    .ok_or_else(|| {
                        (&self).print_err(Error::DappUserDoesNotExist, "get_dapp_user")
                    })
            }
            /// Get a single provider's details
            ///
            /// Returns an error if the user does not exist
            pub fn get_provider_details(
                &self,
                accountid: AccountId,
            ) -> Result<Provider, Error> {
                self.providers
                    .get(accountid)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::ProviderDoesNotExist,
                                "get_provider_details",
                            )
                    })
            }
            /// Get a single dapps details
            ///
            /// Returns an error if the dapp does not exist
            pub fn get_dapp_details(&self, contract: AccountId) -> Result<Dapp, Error> {
                self.dapps
                    .get(contract)
                    .ok_or_else(|| {
                        (&self).print_err(Error::DappDoesNotExist, "get_dapp_details")
                    })
            }
            /// Get a solution commitment
            ///
            /// Returns an error if the commitment does not exist
            pub fn get_captcha_solution_commitment(
                &self,
                captcha_solution_commitment_id: Hash,
            ) -> Result<CaptchaSolutionCommitment, Error> {
                if self
                    .captcha_solution_commitments
                    .get(captcha_solution_commitment_id)
                    .is_none()
                {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::CaptchaSolutionCommitmentDoesNotExist,
                                    "get_captcha_solution_commitment",
                                ),
                        )
                    };
                }
                let commitment = self
                    .captcha_solution_commitments
                    .get(captcha_solution_commitment_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::CaptchaSolutionCommitmentDoesNotExist,
                                "get_captcha_solution_commitment",
                            )
                    })?;
                Ok(commitment)
            }
            /// Returns the account balance for the specified `dapp`.
            ///
            pub fn get_dapp_balance(&self, dapp: AccountId) -> Result<Balance, Error> {
                Ok(self.get_dapp_details(dapp)?.balance)
            }
            /// Returns the account balance for the specified `provider`.
            ///
            pub fn get_provider_balance(
                &self,
                provider: AccountId,
            ) -> Result<Balance, Error> {
                Ok(self.get_provider_details(provider)?.balance)
            }
            /// Returns the operator votes for code hashes
            pub fn get_operator_code_hash_votes(&self) -> Vec<OperatorCodeHashVote> {
                let mut code_hash_votes: Vec<OperatorCodeHashVote> = Vec::new();
                for account_id in self.operator_accounts.get().unwrap().iter() {
                    code_hash_votes
                        .push(OperatorCodeHashVote {
                            account_id: *account_id,
                            code_hash: self
                                .operator_code_hash_votes
                                .get(account_id)
                                .unwrap_or([0; 32]),
                        });
                }
                code_hash_votes
            }
            /// List providers given an array of account id
            ///
            /// Returns empty if none were matched
            pub fn list_providers_by_ids(
                &self,
                provider_ids: Vec<AccountId>,
            ) -> Result<Vec<Provider>, Error> {
                let mut providers = Vec::new();
                for provider_id in provider_ids {
                    let provider = self.providers.get(provider_id);
                    if provider.is_none() {
                        continue;
                    }
                    providers
                        .push(
                            provider
                                .ok_or_else(|| {
                                    (&self)
                                        .print_err(
                                            Error::ProviderDoesNotExist,
                                            "list_providers_by_ids",
                                        )
                                })?,
                        );
                }
                Ok(providers)
            }
            /// List providers given an array of status
            ///
            /// Returns empty if none were matched
            pub fn list_providers_by_status(
                &self,
                statuses: Vec<GovernanceStatus>,
            ) -> Result<Vec<Provider>, Error> {
                let mut providers = Vec::<Provider>::new();
                for status in statuses {
                    for payee in [Payee::Dapp, Payee::Provider] {
                        let providers_set = self
                            .provider_accounts
                            .get(ProviderState { status, payee });
                        if providers_set.is_none() {
                            continue;
                        }
                        let provider_ids = providers_set
                            .ok_or_else(|| {
                                (&self)
                                    .print_err(
                                        Error::ProviderDoesNotExist,
                                        "list_providers_by_status",
                                    )
                            })?
                            .into_iter()
                            .collect();
                        providers.append(&mut self.list_providers_by_ids(provider_ids)?);
                    }
                }
                Ok(providers)
            }
            /// Get a random active provider
            ///
            /// Returns error if no active provider is found
            pub fn get_random_active_provider(
                &self,
                user_account: AccountId,
                dapp_contract_account: AccountId,
            ) -> Result<RandomProvider, Error> {
                let dapp = self.validate_dapp(dapp_contract_account)?;
                let status = GovernanceStatus::Active;
                let active_providers;
                let mut index: u128;
                if dapp.payee == DappPayee::Any {
                    let active_providers_initial = self
                        .provider_accounts
                        .get(ProviderState {
                            status,
                            payee: Payee::Dapp,
                        })
                        .unwrap_or_default();
                    let mut max = active_providers_initial.len();
                    let active_providers_secondary = self
                        .provider_accounts
                        .get(ProviderState {
                            status,
                            payee: Payee::Provider,
                        })
                        .unwrap_or_default();
                    max += active_providers_secondary.len();
                    if max == 0 {
                        return {
                            Err(
                                (&self)
                                    .print_err(
                                        Error::NoActiveProviders,
                                        "get_random_active_provider",
                                    ),
                            )
                        };
                    }
                    index = self.get_random_number(max as u128, user_account);
                    if index < active_providers_initial.len() as u128 {
                        active_providers = active_providers_initial;
                    } else {
                        index -= active_providers_initial.len() as u128;
                        active_providers = active_providers_secondary;
                    }
                } else {
                    let payee = Payee::try_from(dapp.payee)
                        .map_err(|_| Error::InvalidPayee)?;
                    active_providers = self
                        .provider_accounts
                        .get(ProviderState { status, payee })
                        .unwrap_or_default();
                    if active_providers.is_empty() {
                        return {
                            Err(
                                (&self)
                                    .print_err(
                                        Error::NoActiveProviders,
                                        "get_random_active_provider",
                                    ),
                            )
                        };
                    }
                    index = self
                        .get_random_number(active_providers.len() as u128, user_account);
                }
                let provider_id = active_providers
                    .into_iter()
                    .nth(index as usize)
                    .unwrap();
                let provider = self
                    .providers
                    .get(provider_id)
                    .ok_or_else(|| {
                        (&self)
                            .print_err(
                                Error::ProviderDoesNotExist,
                                "get_random_active_provider",
                            )
                    })?;
                Ok(RandomProvider {
                    provider_id,
                    provider,
                    block_number: self.env().block_number(),
                })
            }
            /// Get the AccountIds of all Providers ever registered
            ///
            /// Returns {Vec<AccountId>}
            pub fn get_all_provider_ids(&self) -> Result<Vec<AccountId>, Error> {
                let mut provider_ids = Vec::<AccountId>::new();
                for status in [
                    GovernanceStatus::Active,
                    GovernanceStatus::Suspended,
                    GovernanceStatus::Deactivated,
                ] {
                    for payee in [Payee::Provider, Payee::Dapp] {
                        let providers_set = self
                            .provider_accounts
                            .get(ProviderState { status, payee });
                        if providers_set.is_none() {
                            continue;
                        }
                        provider_ids
                            .append(&mut providers_set.unwrap().into_iter().collect());
                    }
                }
                Ok(provider_ids)
            }
            /// Get a random number from 0 to `len` - 1 inclusive. The user account is added to the seed for additional random entropy.
            pub fn get_random_number(&self, len: u128, user_account: AccountId) -> u128 {
                if len == 0 {
                    ::core::panicking::panic_fmt(
                        format_args!(
                            "Cannot generate a random number for a length of 0 or less"
                        ),
                    );
                }
                const BLOCK_NUMBER_SIZE: usize = 4;
                const BLOCK_TIMESTAMP_SIZE: usize = 8;
                const USER_ACCOUNT_SIZE: usize = 32;
                let block_number: u32 = self.env().block_number();
                let block_timestamp: u64 = self.env().block_timestamp();
                let user_account_bytes: &[u8; USER_ACCOUNT_SIZE] = user_account.as_ref();
                let block_number_arr: [u8; BLOCK_NUMBER_SIZE] = block_number
                    .to_le_bytes();
                let block_timestamp_arr: [u8; BLOCK_TIMESTAMP_SIZE] = block_timestamp
                    .to_le_bytes();
                let tmp: [u8; USER_ACCOUNT_SIZE + BLOCK_NUMBER_SIZE] = crate::concat_u8(
                    user_account_bytes,
                    &block_number_arr,
                );
                let bytes: [u8; BLOCK_TIMESTAMP_SIZE + BLOCK_NUMBER_SIZE
                    + USER_ACCOUNT_SIZE] = crate::concat_u8(&tmp, &block_timestamp_arr);
                let mut hash_output = <Blake2x128 as HashOutput>::Type::default();
                <Blake2x128 as CryptoHash>::hash(&bytes, &mut hash_output);
                let next = u128::from_le_bytes(hash_output);
                next % len
            }
            /// Get a random number from 0 to `len` - 1 inclusive. Uses the caller account for additional random entropy.
            pub fn get_random_number_caller(&self, len: u128) -> u128 {
                self.get_random_number(len, self.env().caller())
            }
            /// Modifies the code which is used to execute calls to this contract address (`AccountId`).
            /// We use this to upgrade the contract logic. The caller must be an operator.
            /// `true` is returned on successful upgrade, `false` otherwise
            /// Errors are returned if the caller is not an operator, if the code hash is the callers
            /// account_id, if the code is not found, and for any other unknown ink errors
            pub fn operator_set_code(
                &mut self,
                code_hash: [u8; 32],
            ) -> Result<bool, Error> {
                let code_hash_account = AccountId::from(code_hash);
                let caller = self.env().caller();
                if self.operators.get(caller).is_none() {
                    return {
                        Err((&self).print_err(Error::NotAuthorised, "operator_set_code"))
                    };
                }
                if self.env().is_contract(&code_hash_account) {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::InvalidCodeHash, "operator_set_code"),
                        )
                    };
                }
                if self.env().own_code_hash().unwrap() == code_hash.into() {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::InvalidCodeHash, "operator_set_code"),
                        )
                    };
                }
                self.operator_code_hash_votes.insert(caller, &code_hash);
                for operator in self.operator_accounts.get().unwrap().iter() {
                    if self.operator_code_hash_votes.get(operator).is_none() {
                        return Ok(false);
                    }
                    let vote = self.operator_code_hash_votes.get(operator).unwrap();
                    if vote != code_hash {
                        return Ok(false);
                    }
                }
                let set_code_hash_result = ink::env::set_code_hash(&code_hash);
                if let Err(e) = set_code_hash_result {
                    match e {
                        ink::env::Error::CodeNotFound => {
                            return {
                                Err(
                                    (&self).print_err(Error::CodeNotFound, "operator_set_code"),
                                )
                            };
                        }
                        _ => {
                            return {
                                Err((&self).print_err(Error::Unknown, "operator_set_code"))
                            };
                        }
                    }
                }
                for operator in self.operator_accounts.get().unwrap().iter() {
                    self.operator_code_hash_votes.remove(operator);
                }
                Ok(true)
            }
            /// Print and return an error
            fn print_err(&self, err: Error, fn_name: &str) -> Error {
                ::ink_env::debug_message(
                    &{
                        let res = ::alloc::fmt::format(
                            format_args!(
                                "{0}\n", { let res =
                                ::alloc::fmt::format(format_args!("ERROR in {0}() at block {1} with caller {2:?}\n\'{3:?}\'",
                                fn_name, self.env().block_number(), self.env().caller(),
                                err)); res }
                            ),
                        );
                        res
                    },
                );
                err
            }
            /// Switch the `provider_account` between indexes in `self.provider_accounts`
            fn provider_change_status(
                &mut self,
                provider_account: AccountId,
                current_provider_status: GovernanceStatus,
                new_status: GovernanceStatus,
                payee: Payee,
            ) {
                if current_provider_status != new_status {
                    let current_key = ProviderState {
                        status: current_provider_status,
                        payee,
                    };
                    let new_key = ProviderState {
                        status: new_status,
                        payee,
                    };
                    let mut current_status_provider_accounts = self
                        .provider_accounts
                        .get(current_key)
                        .unwrap_or_default();
                    let mut new_status_provider_accounts = self
                        .provider_accounts
                        .get(new_key)
                        .unwrap_or_default();
                    current_status_provider_accounts.remove(&provider_account);
                    new_status_provider_accounts.insert(provider_account);
                    self.provider_accounts
                        .insert(current_key, &current_status_provider_accounts);
                    self.provider_accounts
                        .insert(new_key, &new_status_provider_accounts);
                }
            }
            /// Update a dapp with new funds, setting status as appropriate
            fn dapp_update(
                &mut self,
                owner: AccountId,
                transferred: u128,
                contract: AccountId,
                caller: AccountId,
                payee: DappPayee,
            ) -> Result<(), Error> {
                let mut dapp = self
                    .dapps
                    .get(contract)
                    .ok_or_else(|| {
                        (&self).print_err(Error::DappDoesNotExist, "dapp_update")
                    })?;
                if dapp.owner != caller {
                    return {
                        Err((&self).print_err(Error::NotAuthorised, "dapp_update"))
                    };
                }
                let total = dapp.balance + transferred;
                dapp.balance = total;
                dapp.owner = owner;
                if dapp.balance >= self.dapp_stake_default {
                    dapp.status = GovernanceStatus::Active;
                } else {
                    dapp.status = GovernanceStatus::Suspended;
                }
                dapp.payee = payee;
                self.dapps.insert(contract, &dapp);
                self.env()
                    .emit_event(DappUpdate {
                        contract,
                        owner,
                        value: total,
                        payee,
                        status: dapp.status,
                    });
                Ok(())
            }
            /// Trim the user history to the max length and age.
            /// Returns the history and expired hashes.
            fn trim_user_history(
                &self,
                mut history: Vec<Hash>,
            ) -> (Vec<Hash>, Vec<Hash>) {
                let block_timestamp = self.env().block_timestamp();
                let max_age = if block_timestamp < self.max_user_history_age {
                    block_timestamp
                } else {
                    self.max_user_history_age
                };
                let age_threshold = block_timestamp - max_age;
                let mut expired = Vec::new();
                while history.len() > self.max_user_history_len.into() {
                    let hash = history.pop().unwrap();
                    expired.push(hash);
                }
                while !history.is_empty()
                    && self
                        .captcha_solution_commitments
                        .get(history.last().unwrap())
                        .unwrap()
                        .completed_at < age_threshold
                {
                    let hash = history.pop().unwrap();
                    expired.push(hash);
                }
                (history, expired)
            }
            /// Record a captcha result against a user, clearing out old captcha results as necessary.
            /// A minimum of 1 captcha result will remain irrelevant of max history length or age.
            fn record_commitment(
                &mut self,
                account: AccountId,
                hash: Hash,
                result: CaptchaSolutionCommitment,
            ) {
                let mut user = self
                    .dapp_users
                    .get(account)
                    .unwrap_or_else(|| self.create_new_dapp_user(account));
                self.captcha_solution_commitments.insert(hash, &result);
                user.history.insert(0, hash);
                let (history, expired) = self.trim_user_history(user.history);
                user.history = history;
                for hash in expired.iter() {
                    self.captcha_solution_commitments.remove(hash);
                }
                self.dapp_users.insert(account, &user);
            }
            fn get_user_history_summary(
                &self,
                account: AccountId,
            ) -> Result<UserHistorySummary, Error> {
                let user = self.get_dapp_user(account)?;
                let (history, _expired) = self.trim_user_history(user.history);
                let mut summary = UserHistorySummary {
                    correct: 0,
                    incorrect: 0,
                    score: 0,
                };
                for hash in history.iter() {
                    let result = self.captcha_solution_commitments.get(hash).unwrap();
                    if result.status == CaptchaStatus::Approved {
                        summary.correct += 1;
                    } else if result.status == CaptchaStatus::Disapproved {
                        summary.incorrect += 1;
                    } else {
                        return Err(Error::InvalidCaptchaStatus);
                    }
                }
                if summary.correct + summary.incorrect == 0 {
                    summary.score = 0;
                } else {
                    summary
                        .score = ((summary.correct * 100)
                        / (summary.correct + summary.incorrect)) as u8;
                }
                Ok(summary)
            }
            /// Create a new dapp user if they do not already exist
            fn create_new_dapp_user(&mut self, account: AccountId) -> User {
                let lookup = self.dapp_users.get(account);
                if let Some(user) = lookup {
                    return user;
                }
                let user = User {
                    history: Default::default(),
                };
                self.dapp_users.insert(account, &user);
                let mut dapp_user_accounts = self.dapp_user_accounts.get_or_default();
                dapp_user_accounts.push(account);
                self.dapp_user_accounts.set(&dapp_user_accounts);
                user
            }
            /// Transfer a balance from a provider to a dapp or from a dapp to a provider,
            fn pay_fee(
                &mut self,
                provider_account: &AccountId,
                dapp_account: &AccountId,
            ) -> Result<(), Error> {
                let mut provider = self
                    .providers
                    .get(provider_account)
                    .ok_or_else(|| {
                        (&self).print_err(Error::ProviderDoesNotExist, "pay_fee")
                    })?;
                if provider.fee != 0 {
                    let mut dapp = self
                        .dapps
                        .get(dapp_account)
                        .ok_or_else(|| {
                            (&self).print_err(Error::DappDoesNotExist, "pay_fee")
                        })?;
                    let fee = Balance::from(provider.fee);
                    if provider.payee == Payee::Provider {
                        dapp.balance -= fee;
                        provider.balance += fee;
                    }
                    if provider.payee == Payee::Dapp {
                        provider.balance -= fee;
                        dapp.balance += fee;
                    }
                    self.providers.insert(*provider_account, &provider);
                    self.dapps.insert(*dapp_account, &dapp);
                }
                Ok(())
            }
            /// Transfer a refund fee from payer account to user account
            /// Payee == Provider => Dapp pays solve fee and Dapp pays Dapp User tx fee
            /// Payee == Dapp => Provider pays solve fee and Provider pays Dapp Use
            fn refund_transaction_fee(
                &mut self,
                commitment: CaptchaSolutionCommitment,
                amount: Balance,
            ) -> Result<(), Error> {
                if self.env().balance() < amount {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::ContractInsufficientFunds,
                                    "refund_transaction_fee",
                                ),
                        )
                    };
                }
                if amount > 0 {
                    let mut provider = self
                        .providers
                        .get(commitment.provider)
                        .ok_or_else(|| {
                            (&self)
                                .print_err(
                                    Error::ProviderDoesNotExist,
                                    "refund_transaction_fee",
                                )
                        })?;
                    let mut dapp = self
                        .dapps
                        .get(commitment.contract)
                        .ok_or_else(|| {
                            (&self)
                                .print_err(
                                    Error::DappDoesNotExist,
                                    "refund_transaction_fee",
                                )
                        })?;
                    if provider.payee == Payee::Provider {
                        if dapp.balance < amount {
                            return {
                                Err(
                                    (&self)
                                        .print_err(
                                            Error::DappInsufficientFunds,
                                            "refund_transaction_fee",
                                        ),
                                )
                            };
                        }
                        dapp.balance -= amount;
                        self.dapps.insert(commitment.contract, &dapp);
                    } else {
                        if provider.balance < amount {
                            return {
                                Err(
                                    (&self)
                                        .print_err(
                                            Error::ProviderInsufficientFunds,
                                            "refund_transaction_fee",
                                        ),
                                )
                            };
                        }
                        provider.balance -= amount;
                        self.providers.insert(commitment.provider, &provider);
                    }
                    self.env()
                        .transfer(commitment.account, amount)
                        .map_err(|_| Error::ContractTransferFailed)?;
                }
                Ok(())
            }
            fn validate_provider_exists_and_has_funds(
                &self,
                provider_id: AccountId,
            ) -> Result<Provider, Error> {
                if self.providers.get(provider_id).is_none() {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::ProviderDoesNotExist,
                                    "validate_provider_exists_and_has_funds",
                                ),
                        )
                    };
                }
                let provider = self.get_provider_details(provider_id)?;
                if provider.balance < self.provider_stake_default {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::ProviderInsufficientFunds,
                                    "validate_provider_exists_and_has_funds",
                                ),
                        )
                    };
                }
                Ok(provider)
            }
            fn validate_provider_active(
                &self,
                provider_id: AccountId,
            ) -> Result<Provider, Error> {
                let provider = self.validate_provider_exists_and_has_funds(provider_id)?;
                if provider.status != GovernanceStatus::Active {
                    return {
                        Err(
                            (&self)
                                .print_err(
                                    Error::ProviderInactive,
                                    "validate_provider_active",
                                ),
                        )
                    };
                }
                Ok(provider)
            }
            fn validate_dapp(&self, contract: AccountId) -> Result<Dapp, Error> {
                if self.dapps.get(contract).is_none() {
                    return {
                        Err((&self).print_err(Error::DappDoesNotExist, "validate_dapp"))
                    };
                }
                let dapp = self.get_dapp_details(contract)?;
                if dapp.status != GovernanceStatus::Active {
                    return {
                        Err((&self).print_err(Error::DappInactive, "validate_dapp"))
                    };
                }
                if dapp.balance <= self.dapp_stake_default {
                    return {
                        Err(
                            (&self)
                                .print_err(Error::DappInsufficientFunds, "validate_dapp"),
                        )
                    };
                }
                Ok(dapp)
            }
        }
        const _: () = {
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Vec<AccountId>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u16>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u64>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<u128>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<u128>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u32>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Payee>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u32>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Payee>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<DappPayee>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Option<CaptchaStatus>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Balance>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<(), Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u8>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<bool, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<LastCorrectCaptcha, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<CaptchaData, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<User, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Provider, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Dapp, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<Hash>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<CaptchaSolutionCommitment, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Balance, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Balance, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Vec<OperatorCodeHashVote>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Vec<AccountId>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Vec<Provider>, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<Vec<GovernanceStatus>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Vec<Provider>, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<RandomProvider, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<Vec<AccountId>, Error>>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<AccountId>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<u128>,
            >();
            ::ink::codegen::utils::consume_type::<::ink::codegen::DispatchInput<u128>>();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<u128>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchInput<[u8; 32]>,
            >();
            ::ink::codegen::utils::consume_type::<
                ::ink::codegen::DispatchOutput<Result<bool, Error>>,
            >();
        };
    };
    const _: () = {
        /// The ink! smart contract's call builder.
        ///
        /// Implements the underlying on-chain calling of the ink! smart contract
        /// messages and trait implementations in a type safe way.
        #[repr(transparent)]
        pub struct CallBuilder {
            account_id: AccountId,
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CallBuilder {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(
                    f,
                    "CallBuilder",
                    "account_id",
                    &&self.account_id,
                )
            }
        }
        #[allow(deprecated)]
        const _: () = {
            #[automatically_derived]
            impl ::scale::Encode for CallBuilder {
                fn encode_to<
                    __CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized,
                >(&self, __codec_dest_edqy: &mut __CodecOutputEdqy) {
                    ::scale::Encode::encode_to(&&self.account_id, __codec_dest_edqy)
                }
                fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                    ::scale::Encode::encode(&&self.account_id)
                }
                fn using_encoded<
                    R,
                    F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R,
                >(&self, f: F) -> R {
                    ::scale::Encode::using_encoded(&&self.account_id, f)
                }
            }
            #[automatically_derived]
            impl ::scale::EncodeLike for CallBuilder {}
        };
        #[allow(deprecated)]
        const _: () = {
            #[automatically_derived]
            impl ::scale::Decode for CallBuilder {
                fn decode<__CodecInputEdqy: ::scale::Input>(
                    __codec_input_edqy: &mut __CodecInputEdqy,
                ) -> ::core::result::Result<Self, ::scale::Error> {
                    ::core::result::Result::Ok(CallBuilder {
                        account_id: {
                            let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                                __codec_input_edqy,
                            );
                            match __codec_res_edqy {
                                ::core::result::Result::Err(e) => {
                                    return ::core::result::Result::Err(
                                        e.chain("Could not decode `CallBuilder::account_id`"),
                                    );
                                }
                                ::core::result::Result::Ok(__codec_res_edqy) => {
                                    __codec_res_edqy
                                }
                            }
                        },
                    })
                }
            }
        };
        #[automatically_derived]
        impl ::core::hash::Hash for CallBuilder {
            fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
                ::core::hash::Hash::hash(&self.account_id, state)
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralPartialEq for CallBuilder {}
        #[automatically_derived]
        impl ::core::cmp::PartialEq for CallBuilder {
            #[inline]
            fn eq(&self, other: &CallBuilder) -> bool {
                self.account_id == other.account_id
            }
        }
        #[automatically_derived]
        impl ::core::marker::StructuralEq for CallBuilder {}
        #[automatically_derived]
        impl ::core::cmp::Eq for CallBuilder {
            #[inline]
            #[doc(hidden)]
            #[no_coverage]
            fn assert_receiver_is_total_eq(&self) -> () {
                let _: ::core::cmp::AssertParamIsEq<AccountId>;
            }
        }
        #[automatically_derived]
        impl ::core::clone::Clone for CallBuilder {
            #[inline]
            fn clone(&self) -> CallBuilder {
                CallBuilder {
                    account_id: ::core::clone::Clone::clone(&self.account_id),
                }
            }
        }
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            impl ::scale_info::TypeInfo for CallBuilder {
                type Identity = Self;
                fn type_info() -> ::scale_info::Type {
                    ::scale_info::Type::builder()
                        .path(::scale_info::Path::new("CallBuilder", "prosopo::prosopo"))
                        .type_params(::alloc::vec::Vec::new())
                        .docs(
                            &[
                                "The ink! smart contract's call builder.",
                                "",
                                "Implements the underlying on-chain calling of the ink! smart contract",
                                "messages and trait implementations in a type safe way.",
                            ],
                        )
                        .composite(
                            ::scale_info::build::Fields::named()
                                .field(|f| {
                                    f
                                        .ty::<AccountId>()
                                        .name("account_id")
                                        .type_name("AccountId")
                                }),
                        )
                }
            }
        };
        const _: () = {
            impl ::ink::storage::traits::StorageLayout for CallBuilder {
                fn layout(
                    __key: &::ink::primitives::Key,
                ) -> ::ink::metadata::layout::Layout {
                    ::ink::metadata::layout::Layout::Struct(
                        ::ink::metadata::layout::StructLayout::new(
                            "CallBuilder",
                            [
                                ::ink::metadata::layout::FieldLayout::new(
                                    "account_id",
                                    <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                        __key,
                                    ),
                                ),
                            ],
                        ),
                    )
                }
            }
        };
        const _: () = {
            impl ::ink::codegen::ContractCallBuilder for Prosopo {
                type Type = CallBuilder;
            }
            impl ::ink::env::ContractEnv for CallBuilder {
                type Env = <Prosopo as ::ink::env::ContractEnv>::Env;
            }
        };
        impl ::ink::env::call::FromAccountId<Environment> for CallBuilder {
            #[inline]
            fn from_account_id(account_id: AccountId) -> Self {
                Self { account_id }
            }
        }
        impl ::ink::ToAccountId<Environment> for CallBuilder {
            #[inline]
            fn to_account_id(&self) -> AccountId {
                <AccountId as ::core::clone::Clone>::clone(&self.account_id)
            }
        }
        impl CallBuilder {
            /// Get contract provider minimum stake default.
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_provider_stake_default(
                &self,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::EmptyArgumentList,
                    >,
                >,
                ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<u128>>,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0xF6_u8,
                                0xC0_u8,
                                0x05_u8,
                                0x65_u8,
                            ]),
                        ),
                    )
                    .returns::<u128>()
            }
            /// Get contract dapp minimum stake default.
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_dapp_stake_default(
                &self,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::EmptyArgumentList,
                    >,
                >,
                ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<u128>>,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0x76_u8,
                                0xE2_u8,
                                0x61_u8,
                                0x91_u8,
                            ]),
                        ),
                    )
                    .returns::<u128>()
            }
            /// Register a provider, their service origin and fee
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_register(
                &mut self,
                __ink_binding_0: Hash,
                __ink_binding_1: u32,
                __ink_binding_2: Payee,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Payee>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<u32>,
                                ::ink::env::call::utils::ArgumentList<
                                    ::ink::env::call::utils::Argument<Hash>,
                                    ::ink::env::call::utils::EmptyArgumentList,
                                >,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xC6_u8,
                                    0x6F_u8,
                                    0x9A_u8,
                                    0x2A_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1)
                            .push_arg(__ink_binding_2),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Update an existing provider, their service origin, fee and deposit funds
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_update(
                &mut self,
                __ink_binding_0: Hash,
                __ink_binding_1: u32,
                __ink_binding_2: Payee,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Payee>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<u32>,
                                ::ink::env::call::utils::ArgumentList<
                                    ::ink::env::call::utils::Argument<Hash>,
                                    ::ink::env::call::utils::EmptyArgumentList,
                                >,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xD2_u8,
                                    0xF7_u8,
                                    0x0D_u8,
                                    0xE8_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1)
                            .push_arg(__ink_binding_2),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// De-Register a provider by setting their status to Deactivated
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_deregister(
                &mut self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x5E_u8,
                                    0xFF_u8,
                                    0x53_u8,
                                    0xCF_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Unstake and deactivate the provider's service, returning stake
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_unstake(
                &mut self,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::EmptyArgumentList,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0x95_u8,
                                0x98_u8,
                                0x0B_u8,
                                0x6F_u8,
                            ]),
                        ),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Add a new data set
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_add_dataset(
                &mut self,
                __ink_binding_0: Hash,
                __ink_binding_1: Hash,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Hash>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<Hash>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x75_u8,
                                    0x98_u8,
                                    0x0E_u8,
                                    0xA7_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Register a dapp
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_register(
                &mut self,
                __ink_binding_0: AccountId,
                __ink_binding_1: DappPayee,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<DappPayee>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<AccountId>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x42_u8,
                                    0xB4_u8,
                                    0x5E_u8,
                                    0xFA_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_fund(
                &mut self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x55_u8,
                                    0xDA_u8,
                                    0x62_u8,
                                    0xA9_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Cancel services as a dapp, returning remaining tokens
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_cancel(
                &mut self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x3B_u8,
                                    0x2A_u8,
                                    0x70_u8,
                                    0x48_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Submit a captcha solution commit
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_user_commit(
                &mut self,
                __ink_binding_0: AccountId,
                __ink_binding_1: Hash,
                __ink_binding_2: Hash,
                __ink_binding_3: AccountId,
                __ink_binding_4: AccountId,
                __ink_binding_5: Option<CaptchaStatus>,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Option<CaptchaStatus>>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<AccountId>,
                                ::ink::env::call::utils::ArgumentList<
                                    ::ink::env::call::utils::Argument<AccountId>,
                                    ::ink::env::call::utils::ArgumentList<
                                        ::ink::env::call::utils::Argument<Hash>,
                                        ::ink::env::call::utils::ArgumentList<
                                            ::ink::env::call::utils::Argument<Hash>,
                                            ::ink::env::call::utils::ArgumentList<
                                                ::ink::env::call::utils::Argument<AccountId>,
                                                ::ink::env::call::utils::EmptyArgumentList,
                                            >,
                                        >,
                                    >,
                                >,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x5B_u8,
                                    0x96_u8,
                                    0x5E_u8,
                                    0xAB_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1)
                            .push_arg(__ink_binding_2)
                            .push_arg(__ink_binding_3)
                            .push_arg(__ink_binding_4)
                            .push_arg(__ink_binding_5),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Approve a solution commitment, increment correct captchas, and refund the users tx fee
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_approve(
                &mut self,
                __ink_binding_0: Hash,
                __ink_binding_1: Balance,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Balance>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<Hash>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xD3_u8,
                                    0x36_u8,
                                    0x25_u8,
                                    0xC0_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Disapprove a solution commitment and increment incorrect captchas
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn provider_disapprove(
                &mut self,
                __ink_binding_0: Hash,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Hash>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<(), Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xB0_u8,
                                    0x4F_u8,
                                    0xD5_u8,
                                    0xFB_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<(), Error>>()
            }
            /// Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)
            /// Threshold is decided by the calling user
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_operator_is_human_user(
                &self,
                __ink_binding_0: AccountId,
                __ink_binding_1: u8,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<u8>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<AccountId>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<bool, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xBE_u8,
                                    0x7B_u8,
                                    0x6E_u8,
                                    0xF9_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<Result<bool, Error>>()
            }
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn dapp_operator_last_correct_captcha(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<
                        Result<LastCorrectCaptcha, Error>,
                    >,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xBE_u8,
                                    0x93_u8,
                                    0x0F_u8,
                                    0x18_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<LastCorrectCaptcha, Error>>()
            }
            /// Get a single captcha dataset
            ///
            /// Returns an error if the dapp does not exist
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_captcha_data(
                &self,
                __ink_binding_0: Hash,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Hash>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<CaptchaData, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x7A_u8,
                                    0x54_u8,
                                    0x15_u8,
                                    0x8D_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<CaptchaData, Error>>()
            }
            /// Get a dapp user
            ///
            /// Returns an error if the user does not exist
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_dapp_user(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<User, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x42_u8,
                                    0xDD_u8,
                                    0x7F_u8,
                                    0x6B_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<User, Error>>()
            }
            /// Get a single provider's details
            ///
            /// Returns an error if the user does not exist
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_provider_details(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Provider, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x81_u8,
                                    0x2D_u8,
                                    0x61_u8,
                                    0xE2_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Provider, Error>>()
            }
            /// Get a single dapps details
            ///
            /// Returns an error if the dapp does not exist
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_dapp_details(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Dapp, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xB3_u8,
                                    0xDF_u8,
                                    0xDA_u8,
                                    0xF9_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Dapp, Error>>()
            }
            /// Get a solution commitment
            ///
            /// Returns an error if the commitment does not exist
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_captcha_solution_commitment(
                &self,
                __ink_binding_0: Hash,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Hash>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<
                        Result<CaptchaSolutionCommitment, Error>,
                    >,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x02_u8,
                                    0x8E_u8,
                                    0xBE_u8,
                                    0x00_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<CaptchaSolutionCommitment, Error>>()
            }
            /// Returns the account balance for the specified `dapp`.
            ///
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_dapp_balance(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Balance, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xF8_u8,
                                    0xFD_u8,
                                    0x50_u8,
                                    0x66_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Balance, Error>>()
            }
            /// Returns the account balance for the specified `provider`.
            ///
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_provider_balance(
                &self,
                __ink_binding_0: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Balance, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x99_u8,
                                    0x8D_u8,
                                    0x52_u8,
                                    0x2C_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Balance, Error>>()
            }
            /// Returns the operator votes for code hashes
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_operator_code_hash_votes(
                &self,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::EmptyArgumentList,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Vec<OperatorCodeHashVote>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0x84_u8,
                                0xF3_u8,
                                0x44_u8,
                                0xF6_u8,
                            ]),
                        ),
                    )
                    .returns::<Vec<OperatorCodeHashVote>>()
            }
            /// List providers given an array of account id
            ///
            /// Returns empty if none were matched
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn list_providers_by_ids(
                &self,
                __ink_binding_0: Vec<AccountId>,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Vec<AccountId>>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Vec<Provider>, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0xD5_u8,
                                    0x42_u8,
                                    0x16_u8,
                                    0x0B_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Vec<Provider>, Error>>()
            }
            /// List providers given an array of status
            ///
            /// Returns empty if none were matched
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn list_providers_by_status(
                &self,
                __ink_binding_0: Vec<GovernanceStatus>,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<Vec<GovernanceStatus>>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Vec<Provider>, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x54_u8,
                                    0xB2_u8,
                                    0x8A_u8,
                                    0xB4_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<Vec<Provider>, Error>>()
            }
            /// Get a random active provider
            ///
            /// Returns error if no active provider is found
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_random_active_provider(
                &self,
                __ink_binding_0: AccountId,
                __ink_binding_1: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<AccountId>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<RandomProvider, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x4A_u8,
                                    0xEE_u8,
                                    0x5B_u8,
                                    0xAD_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<Result<RandomProvider, Error>>()
            }
            /// Get the AccountIds of all Providers ever registered
            ///
            /// Returns {Vec<AccountId>}
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_all_provider_ids(
                &self,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::EmptyArgumentList,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<Vec<AccountId>, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0xD2_u8,
                                0xED_u8,
                                0x90_u8,
                                0xD7_u8,
                            ]),
                        ),
                    )
                    .returns::<Result<Vec<AccountId>, Error>>()
            }
            /// Get a random number from 0 to `len` - 1 inclusive. The user account is added to the seed for additional random entropy.
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_random_number(
                &self,
                __ink_binding_0: u128,
                __ink_binding_1: AccountId,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<AccountId>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<u128>,
                                ::ink::env::call::utils::EmptyArgumentList,
                            >,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<u128>>,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x23_u8,
                                    0x06_u8,
                                    0xAE_u8,
                                    0xCD_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0)
                            .push_arg(__ink_binding_1),
                    )
                    .returns::<u128>()
            }
            /// Get a random number from 0 to `len` - 1 inclusive. Uses the caller account for additional random entropy.
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn get_random_number_caller(
                &self,
                __ink_binding_0: u128,
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<u128>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<u128>>,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x64_u8,
                                    0x02_u8,
                                    0xE7_u8,
                                    0x71_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<u128>()
            }
            /// Modifies the code which is used to execute calls to this contract address (`AccountId`).
            /// We use this to upgrade the contract logic. The caller must be an operator.
            /// `true` is returned on successful upgrade, `false` otherwise
            /// Errors are returned if the caller is not an operator, if the code hash is the callers
            /// account_id, if the code is not found, and for any other unknown ink errors
            #[allow(clippy::type_complexity)]
            #[inline]
            pub fn operator_set_code(
                &mut self,
                __ink_binding_0: [u8; 32],
            ) -> ::ink::env::call::CallBuilder<
                Environment,
                ::ink::env::call::utils::Set<::ink::env::call::Call<Environment>>,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::ExecutionInput<
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<[u8; 32]>,
                            ::ink::env::call::utils::EmptyArgumentList,
                        >,
                    >,
                >,
                ::ink::env::call::utils::Set<
                    ::ink::env::call::utils::ReturnType<Result<bool, Error>>,
                >,
            > {
                ::ink::env::call::build_call::<Environment>()
                    .call(::ink::ToAccountId::to_account_id(self))
                    .exec_input(
                        ::ink::env::call::ExecutionInput::new(
                                ::ink::env::call::Selector::new([
                                    0x00_u8,
                                    0xAE_u8,
                                    0x58_u8,
                                    0x5A_u8,
                                ]),
                            )
                            .push_arg(__ink_binding_0),
                    )
                    .returns::<Result<bool, Error>>()
            }
        }
    };
    pub struct ProsopoRef {
        inner: <Prosopo as ::ink::codegen::ContractCallBuilder>::Type,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProsopoRef {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "ProsopoRef",
                "inner",
                &&self.inner,
            )
        }
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProsopoRef {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.inner, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.inner)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.inner, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProsopoRef {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProsopoRef {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProsopoRef {
                    inner: {
                        let __codec_res_edqy = <<Prosopo as ::ink::codegen::ContractCallBuilder>::Type as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProsopoRef::inner`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[automatically_derived]
    impl ::core::hash::Hash for ProsopoRef {
        fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
            ::core::hash::Hash::hash(&self.inner, state)
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProsopoRef {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProsopoRef {
        #[inline]
        fn eq(&self, other: &ProsopoRef) -> bool {
            self.inner == other.inner
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProsopoRef {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProsopoRef {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<
                <Prosopo as ::ink::codegen::ContractCallBuilder>::Type,
            >;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProsopoRef {
        #[inline]
        fn clone(&self) -> ProsopoRef {
            ProsopoRef {
                inner: ::core::clone::Clone::clone(&self.inner),
            }
        }
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProsopoRef {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProsopoRef", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<
                                        <Prosopo as ::ink::codegen::ContractCallBuilder>::Type,
                                    >()
                                    .name("inner")
                                    .type_name(
                                        "<Prosopo as::ink::codegen::ContractCallBuilder>::Type",
                                    )
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProsopoRef {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProsopoRef",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "inner",
                                <<Prosopo as ::ink::codegen::ContractCallBuilder>::Type as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    const _: () = {
        impl ::ink::env::ContractReference for Prosopo {
            type Type = ProsopoRef;
        }
        impl ::ink::env::call::ConstructorReturnType<ProsopoRef> for Prosopo {
            type Output = ProsopoRef;
            type Error = ();
            fn ok(value: ProsopoRef) -> Self::Output {
                value
            }
        }
        impl<E> ::ink::env::call::ConstructorReturnType<ProsopoRef>
        for ::core::result::Result<Prosopo, E>
        where
            E: ::scale::Decode,
        {
            const IS_RESULT: bool = true;
            type Output = ::core::result::Result<ProsopoRef, E>;
            type Error = E;
            fn ok(value: ProsopoRef) -> Self::Output {
                ::core::result::Result::Ok(value)
            }
            fn err(err: Self::Error) -> ::core::option::Option<Self::Output> {
                ::core::option::Option::Some(::core::result::Result::Err(err))
            }
        }
        impl ::ink::env::ContractEnv for ProsopoRef {
            type Env = <Prosopo as ::ink::env::ContractEnv>::Env;
        }
    };
    impl ProsopoRef {
        /// Constructor
        #[inline]
        #[allow(clippy::type_complexity)]
        pub fn default(
            __ink_binding_0: Vec<AccountId>,
            __ink_binding_1: u128,
            __ink_binding_2: u128,
            __ink_binding_3: u16,
            __ink_binding_4: u64,
        ) -> ::ink::env::call::CreateBuilder<
            Environment,
            Self,
            ::ink::env::call::utils::Unset<Hash>,
            ::ink::env::call::utils::Unset<u64>,
            ::ink::env::call::utils::Unset<Balance>,
            ::ink::env::call::utils::Set<
                ::ink::env::call::ExecutionInput<
                    ::ink::env::call::utils::ArgumentList<
                        ::ink::env::call::utils::Argument<u64>,
                        ::ink::env::call::utils::ArgumentList<
                            ::ink::env::call::utils::Argument<u16>,
                            ::ink::env::call::utils::ArgumentList<
                                ::ink::env::call::utils::Argument<u128>,
                                ::ink::env::call::utils::ArgumentList<
                                    ::ink::env::call::utils::Argument<u128>,
                                    ::ink::env::call::utils::ArgumentList<
                                        ::ink::env::call::utils::Argument<Vec<AccountId>>,
                                        ::ink::env::call::utils::EmptyArgumentList,
                                    >,
                                >,
                            >,
                        >,
                    >,
                >,
            >,
            ::ink::env::call::utils::Unset<::ink::env::call::state::Salt>,
            ::ink::env::call::utils::Set<::ink::env::call::utils::ReturnType<Self>>,
        > {
            ::ink::env::call::build_create::<Self>()
                .exec_input(
                    ::ink::env::call::ExecutionInput::new(
                            ::ink::env::call::Selector::new([
                                0xED_u8,
                                0x4B_u8,
                                0x9D_u8,
                                0x1B_u8,
                            ]),
                        )
                        .push_arg(__ink_binding_0)
                        .push_arg(__ink_binding_1)
                        .push_arg(__ink_binding_2)
                        .push_arg(__ink_binding_3)
                        .push_arg(__ink_binding_4),
                )
                .returns::<Self>()
        }
        /// Get contract provider minimum stake default.
        #[inline]
        pub fn get_provider_stake_default(&self) -> u128 {
            self.try_get_provider_stake_default()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_stake_default", error
                    ),
                ))
        }
        /// Get contract provider minimum stake default.
        #[inline]
        pub fn try_get_provider_stake_default(&self) -> ::ink::MessageResult<u128> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_provider_stake_default()
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_stake_default", error
                    ),
                ))
        }
        /// Get contract dapp minimum stake default.
        #[inline]
        pub fn get_dapp_stake_default(&self) -> u128 {
            self.try_get_dapp_stake_default()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_stake_default", error
                    ),
                ))
        }
        /// Get contract dapp minimum stake default.
        #[inline]
        pub fn try_get_dapp_stake_default(&self) -> ::ink::MessageResult<u128> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_dapp_stake_default()
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_stake_default", error
                    ),
                ))
        }
        /// Register a provider, their service origin and fee
        #[inline]
        pub fn provider_register(
            &mut self,
            service_origin: Hash,
            fee: u32,
            payee: Payee,
        ) -> Result<(), Error> {
            self.try_provider_register(service_origin, fee, payee)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_register", error
                    ),
                ))
        }
        /// Register a provider, their service origin and fee
        #[inline]
        pub fn try_provider_register(
            &mut self,
            service_origin: Hash,
            fee: u32,
            payee: Payee,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_register(service_origin, fee, payee)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_register", error
                    ),
                ))
        }
        /// Update an existing provider, their service origin, fee and deposit funds
        #[inline]
        pub fn provider_update(
            &mut self,
            service_origin: Hash,
            fee: u32,
            payee: Payee,
        ) -> Result<(), Error> {
            self.try_provider_update(service_origin, fee, payee)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_update", error
                    ),
                ))
        }
        /// Update an existing provider, their service origin, fee and deposit funds
        #[inline]
        pub fn try_provider_update(
            &mut self,
            service_origin: Hash,
            fee: u32,
            payee: Payee,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_update(service_origin, fee, payee)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_update", error
                    ),
                ))
        }
        /// De-Register a provider by setting their status to Deactivated
        #[inline]
        pub fn provider_deregister(
            &mut self,
            provider_account: AccountId,
        ) -> Result<(), Error> {
            self.try_provider_deregister(provider_account)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_deregister", error
                    ),
                ))
        }
        /// De-Register a provider by setting their status to Deactivated
        #[inline]
        pub fn try_provider_deregister(
            &mut self,
            provider_account: AccountId,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_deregister(provider_account)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_deregister", error
                    ),
                ))
        }
        /// Unstake and deactivate the provider's service, returning stake
        #[inline]
        pub fn provider_unstake(&mut self) -> Result<(), Error> {
            self.try_provider_unstake()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_unstake", error
                    ),
                ))
        }
        /// Unstake and deactivate the provider's service, returning stake
        #[inline]
        pub fn try_provider_unstake(
            &mut self,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_unstake()
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_unstake", error
                    ),
                ))
        }
        /// Add a new data set
        #[inline]
        pub fn provider_add_dataset(
            &mut self,
            dataset_id: Hash,
            dataset_id_content: Hash,
        ) -> Result<(), Error> {
            self.try_provider_add_dataset(dataset_id, dataset_id_content)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_add_dataset", error
                    ),
                ))
        }
        /// Add a new data set
        #[inline]
        pub fn try_provider_add_dataset(
            &mut self,
            dataset_id: Hash,
            dataset_id_content: Hash,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_add_dataset(dataset_id, dataset_id_content)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_add_dataset", error
                    ),
                ))
        }
        /// Register a dapp
        #[inline]
        pub fn dapp_register(
            &mut self,
            contract: AccountId,
            payee: DappPayee,
        ) -> Result<(), Error> {
            self.try_dapp_register(contract, payee)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_register", error
                    ),
                ))
        }
        /// Register a dapp
        #[inline]
        pub fn try_dapp_register(
            &mut self,
            contract: AccountId,
            payee: DappPayee,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .dapp_register(contract, payee)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_register", error
                    ),
                ))
        }
        /// Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps
        #[inline]
        pub fn dapp_fund(&mut self, contract: AccountId) -> Result<(), Error> {
            self.try_dapp_fund(contract)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_fund", error
                    ),
                ))
        }
        /// Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps
        #[inline]
        pub fn try_dapp_fund(
            &mut self,
            contract: AccountId,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .dapp_fund(contract)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_fund", error
                    ),
                ))
        }
        /// Cancel services as a dapp, returning remaining tokens
        #[inline]
        pub fn dapp_cancel(&mut self, contract: AccountId) -> Result<(), Error> {
            self.try_dapp_cancel(contract)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_cancel", error
                    ),
                ))
        }
        /// Cancel services as a dapp, returning remaining tokens
        #[inline]
        pub fn try_dapp_cancel(
            &mut self,
            contract: AccountId,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .dapp_cancel(contract)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_cancel", error
                    ),
                ))
        }
        /// Submit a captcha solution commit
        #[inline]
        pub fn dapp_user_commit(
            &mut self,
            contract: AccountId,
            dataset_id: Hash,
            user_merkle_tree_root: Hash,
            provider: AccountId,
            dapp_user: AccountId,
            status_option: Option<CaptchaStatus>,
        ) -> Result<(), Error> {
            self.try_dapp_user_commit(
                    contract,
                    dataset_id,
                    user_merkle_tree_root,
                    provider,
                    dapp_user,
                    status_option,
                )
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_user_commit", error
                    ),
                ))
        }
        /// Submit a captcha solution commit
        #[inline]
        pub fn try_dapp_user_commit(
            &mut self,
            contract: AccountId,
            dataset_id: Hash,
            user_merkle_tree_root: Hash,
            provider: AccountId,
            dapp_user: AccountId,
            status_option: Option<CaptchaStatus>,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .dapp_user_commit(
                    contract,
                    dataset_id,
                    user_merkle_tree_root,
                    provider,
                    dapp_user,
                    status_option,
                )
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_user_commit", error
                    ),
                ))
        }
        /// Approve a solution commitment, increment correct captchas, and refund the users tx fee
        #[inline]
        pub fn provider_approve(
            &mut self,
            captcha_solution_commitment_id: Hash,
            transaction_fee: Balance,
        ) -> Result<(), Error> {
            self.try_provider_approve(captcha_solution_commitment_id, transaction_fee)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_approve", error
                    ),
                ))
        }
        /// Approve a solution commitment, increment correct captchas, and refund the users tx fee
        #[inline]
        pub fn try_provider_approve(
            &mut self,
            captcha_solution_commitment_id: Hash,
            transaction_fee: Balance,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_approve(captcha_solution_commitment_id, transaction_fee)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_approve", error
                    ),
                ))
        }
        /// Disapprove a solution commitment and increment incorrect captchas
        #[inline]
        pub fn provider_disapprove(
            &mut self,
            captcha_solution_commitment_id: Hash,
        ) -> Result<(), Error> {
            self.try_provider_disapprove(captcha_solution_commitment_id)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_disapprove", error
                    ),
                ))
        }
        /// Disapprove a solution commitment and increment incorrect captchas
        #[inline]
        pub fn try_provider_disapprove(
            &mut self,
            captcha_solution_commitment_id: Hash,
        ) -> ::ink::MessageResult<Result<(), Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .provider_disapprove(captcha_solution_commitment_id)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "provider_disapprove", error
                    ),
                ))
        }
        /// Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)
        /// Threshold is decided by the calling user
        #[inline]
        pub fn dapp_operator_is_human_user(
            &self,
            user: AccountId,
            threshold: u8,
        ) -> Result<bool, Error> {
            self.try_dapp_operator_is_human_user(user, threshold)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_operator_is_human_user", error
                    ),
                ))
        }
        /// Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)
        /// Threshold is decided by the calling user
        #[inline]
        pub fn try_dapp_operator_is_human_user(
            &self,
            user: AccountId,
            threshold: u8,
        ) -> ::ink::MessageResult<Result<bool, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .dapp_operator_is_human_user(user, threshold)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_operator_is_human_user", error
                    ),
                ))
        }
        #[inline]
        pub fn dapp_operator_last_correct_captcha(
            &self,
            user: AccountId,
        ) -> Result<LastCorrectCaptcha, Error> {
            self.try_dapp_operator_last_correct_captcha(user)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_operator_last_correct_captcha", error
                    ),
                ))
        }
        #[inline]
        pub fn try_dapp_operator_last_correct_captcha(
            &self,
            user: AccountId,
        ) -> ::ink::MessageResult<Result<LastCorrectCaptcha, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .dapp_operator_last_correct_captcha(user)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "dapp_operator_last_correct_captcha", error
                    ),
                ))
        }
        /// Get a single captcha dataset
        ///
        /// Returns an error if the dapp does not exist
        #[inline]
        pub fn get_captcha_data(&self, dataset_id: Hash) -> Result<CaptchaData, Error> {
            self.try_get_captcha_data(dataset_id)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_captcha_data", error
                    ),
                ))
        }
        /// Get a single captcha dataset
        ///
        /// Returns an error if the dapp does not exist
        #[inline]
        pub fn try_get_captcha_data(
            &self,
            dataset_id: Hash,
        ) -> ::ink::MessageResult<Result<CaptchaData, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_captcha_data(dataset_id)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_captcha_data", error
                    ),
                ))
        }
        /// Get a dapp user
        ///
        /// Returns an error if the user does not exist
        #[inline]
        pub fn get_dapp_user(&self, dapp_user_id: AccountId) -> Result<User, Error> {
            self.try_get_dapp_user(dapp_user_id)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_user", error
                    ),
                ))
        }
        /// Get a dapp user
        ///
        /// Returns an error if the user does not exist
        #[inline]
        pub fn try_get_dapp_user(
            &self,
            dapp_user_id: AccountId,
        ) -> ::ink::MessageResult<Result<User, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_dapp_user(dapp_user_id)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_user", error
                    ),
                ))
        }
        /// Get a single provider's details
        ///
        /// Returns an error if the user does not exist
        #[inline]
        pub fn get_provider_details(
            &self,
            accountid: AccountId,
        ) -> Result<Provider, Error> {
            self.try_get_provider_details(accountid)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_details", error
                    ),
                ))
        }
        /// Get a single provider's details
        ///
        /// Returns an error if the user does not exist
        #[inline]
        pub fn try_get_provider_details(
            &self,
            accountid: AccountId,
        ) -> ::ink::MessageResult<Result<Provider, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_provider_details(accountid)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_details", error
                    ),
                ))
        }
        /// Get a single dapps details
        ///
        /// Returns an error if the dapp does not exist
        #[inline]
        pub fn get_dapp_details(&self, contract: AccountId) -> Result<Dapp, Error> {
            self.try_get_dapp_details(contract)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_details", error
                    ),
                ))
        }
        /// Get a single dapps details
        ///
        /// Returns an error if the dapp does not exist
        #[inline]
        pub fn try_get_dapp_details(
            &self,
            contract: AccountId,
        ) -> ::ink::MessageResult<Result<Dapp, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_dapp_details(contract)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_details", error
                    ),
                ))
        }
        /// Get a solution commitment
        ///
        /// Returns an error if the commitment does not exist
        #[inline]
        pub fn get_captcha_solution_commitment(
            &self,
            captcha_solution_commitment_id: Hash,
        ) -> Result<CaptchaSolutionCommitment, Error> {
            self.try_get_captcha_solution_commitment(captcha_solution_commitment_id)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_captcha_solution_commitment", error
                    ),
                ))
        }
        /// Get a solution commitment
        ///
        /// Returns an error if the commitment does not exist
        #[inline]
        pub fn try_get_captcha_solution_commitment(
            &self,
            captcha_solution_commitment_id: Hash,
        ) -> ::ink::MessageResult<Result<CaptchaSolutionCommitment, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_captcha_solution_commitment(captcha_solution_commitment_id)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_captcha_solution_commitment", error
                    ),
                ))
        }
        /// Returns the account balance for the specified `dapp`.
        ///
        #[inline]
        pub fn get_dapp_balance(&self, dapp: AccountId) -> Result<Balance, Error> {
            self.try_get_dapp_balance(dapp)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_balance", error
                    ),
                ))
        }
        /// Returns the account balance for the specified `dapp`.
        ///
        #[inline]
        pub fn try_get_dapp_balance(
            &self,
            dapp: AccountId,
        ) -> ::ink::MessageResult<Result<Balance, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_dapp_balance(dapp)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_dapp_balance", error
                    ),
                ))
        }
        /// Returns the account balance for the specified `provider`.
        ///
        #[inline]
        pub fn get_provider_balance(
            &self,
            provider: AccountId,
        ) -> Result<Balance, Error> {
            self.try_get_provider_balance(provider)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_balance", error
                    ),
                ))
        }
        /// Returns the account balance for the specified `provider`.
        ///
        #[inline]
        pub fn try_get_provider_balance(
            &self,
            provider: AccountId,
        ) -> ::ink::MessageResult<Result<Balance, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_provider_balance(provider)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_provider_balance", error
                    ),
                ))
        }
        /// Returns the operator votes for code hashes
        #[inline]
        pub fn get_operator_code_hash_votes(&self) -> Vec<OperatorCodeHashVote> {
            self.try_get_operator_code_hash_votes()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_operator_code_hash_votes", error
                    ),
                ))
        }
        /// Returns the operator votes for code hashes
        #[inline]
        pub fn try_get_operator_code_hash_votes(
            &self,
        ) -> ::ink::MessageResult<Vec<OperatorCodeHashVote>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_operator_code_hash_votes()
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_operator_code_hash_votes", error
                    ),
                ))
        }
        /// List providers given an array of account id
        ///
        /// Returns empty if none were matched
        #[inline]
        pub fn list_providers_by_ids(
            &self,
            provider_ids: Vec<AccountId>,
        ) -> Result<Vec<Provider>, Error> {
            self.try_list_providers_by_ids(provider_ids)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "list_providers_by_ids", error
                    ),
                ))
        }
        /// List providers given an array of account id
        ///
        /// Returns empty if none were matched
        #[inline]
        pub fn try_list_providers_by_ids(
            &self,
            provider_ids: Vec<AccountId>,
        ) -> ::ink::MessageResult<Result<Vec<Provider>, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .list_providers_by_ids(provider_ids)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "list_providers_by_ids", error
                    ),
                ))
        }
        /// List providers given an array of status
        ///
        /// Returns empty if none were matched
        #[inline]
        pub fn list_providers_by_status(
            &self,
            statuses: Vec<GovernanceStatus>,
        ) -> Result<Vec<Provider>, Error> {
            self.try_list_providers_by_status(statuses)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "list_providers_by_status", error
                    ),
                ))
        }
        /// List providers given an array of status
        ///
        /// Returns empty if none were matched
        #[inline]
        pub fn try_list_providers_by_status(
            &self,
            statuses: Vec<GovernanceStatus>,
        ) -> ::ink::MessageResult<Result<Vec<Provider>, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .list_providers_by_status(statuses)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "list_providers_by_status", error
                    ),
                ))
        }
        /// Get a random active provider
        ///
        /// Returns error if no active provider is found
        #[inline]
        pub fn get_random_active_provider(
            &self,
            user_account: AccountId,
            dapp_contract_account: AccountId,
        ) -> Result<RandomProvider, Error> {
            self.try_get_random_active_provider(user_account, dapp_contract_account)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_active_provider", error
                    ),
                ))
        }
        /// Get a random active provider
        ///
        /// Returns error if no active provider is found
        #[inline]
        pub fn try_get_random_active_provider(
            &self,
            user_account: AccountId,
            dapp_contract_account: AccountId,
        ) -> ::ink::MessageResult<Result<RandomProvider, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_random_active_provider(user_account, dapp_contract_account)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_active_provider", error
                    ),
                ))
        }
        /// Get the AccountIds of all Providers ever registered
        ///
        /// Returns {Vec<AccountId>}
        #[inline]
        pub fn get_all_provider_ids(&self) -> Result<Vec<AccountId>, Error> {
            self.try_get_all_provider_ids()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_all_provider_ids", error
                    ),
                ))
        }
        /// Get the AccountIds of all Providers ever registered
        ///
        /// Returns {Vec<AccountId>}
        #[inline]
        pub fn try_get_all_provider_ids(
            &self,
        ) -> ::ink::MessageResult<Result<Vec<AccountId>, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_all_provider_ids()
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_all_provider_ids", error
                    ),
                ))
        }
        /// Get a random number from 0 to `len` - 1 inclusive. The user account is added to the seed for additional random entropy.
        #[inline]
        pub fn get_random_number(&self, len: u128, user_account: AccountId) -> u128 {
            self.try_get_random_number(len, user_account)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_number", error
                    ),
                ))
        }
        /// Get a random number from 0 to `len` - 1 inclusive. The user account is added to the seed for additional random entropy.
        #[inline]
        pub fn try_get_random_number(
            &self,
            len: u128,
            user_account: AccountId,
        ) -> ::ink::MessageResult<u128> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_random_number(len, user_account)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_number", error
                    ),
                ))
        }
        /// Get a random number from 0 to `len` - 1 inclusive. Uses the caller account for additional random entropy.
        #[inline]
        pub fn get_random_number_caller(&self, len: u128) -> u128 {
            self.try_get_random_number_caller(len)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_number_caller", error
                    ),
                ))
        }
        /// Get a random number from 0 to `len` - 1 inclusive. Uses the caller account for additional random entropy.
        #[inline]
        pub fn try_get_random_number_caller(
            &self,
            len: u128,
        ) -> ::ink::MessageResult<u128> {
            <Self as ::ink::codegen::TraitCallBuilder>::call(self)
                .get_random_number_caller(len)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "get_random_number_caller", error
                    ),
                ))
        }
        /// Modifies the code which is used to execute calls to this contract address (`AccountId`).
        /// We use this to upgrade the contract logic. The caller must be an operator.
        /// `true` is returned on successful upgrade, `false` otherwise
        /// Errors are returned if the caller is not an operator, if the code hash is the callers
        /// account_id, if the code is not found, and for any other unknown ink errors
        #[inline]
        pub fn operator_set_code(&mut self, code_hash: [u8; 32]) -> Result<bool, Error> {
            self.try_operator_set_code(code_hash)
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "operator_set_code", error
                    ),
                ))
        }
        /// Modifies the code which is used to execute calls to this contract address (`AccountId`).
        /// We use this to upgrade the contract logic. The caller must be an operator.
        /// `true` is returned on successful upgrade, `false` otherwise
        /// Errors are returned if the caller is not an operator, if the code hash is the callers
        /// account_id, if the code is not found, and for any other unknown ink errors
        #[inline]
        pub fn try_operator_set_code(
            &mut self,
            code_hash: [u8; 32],
        ) -> ::ink::MessageResult<Result<bool, Error>> {
            <Self as ::ink::codegen::TraitCallBuilder>::call_mut(self)
                .operator_set_code(code_hash)
                .try_invoke()
                .unwrap_or_else(|error| ::core::panicking::panic_fmt(
                    format_args!(
                        "encountered error while calling {0}::{1}: {2:?}", "Prosopo",
                        "operator_set_code", error
                    ),
                ))
        }
    }
    const _: () = {
        impl ::ink::codegen::TraitCallBuilder for ProsopoRef {
            type Builder = <Prosopo as ::ink::codegen::ContractCallBuilder>::Type;
            #[inline]
            fn call(&self) -> &Self::Builder {
                &self.inner
            }
            #[inline]
            fn call_mut(&mut self) -> &mut Self::Builder {
                &mut self.inner
            }
        }
    };
    impl ::ink::env::call::FromAccountId<Environment> for ProsopoRef {
        #[inline]
        fn from_account_id(account_id: AccountId) -> Self {
            Self {
                inner: <<Prosopo as ::ink::codegen::ContractCallBuilder>::Type as ::ink::env::call::FromAccountId<
                    Environment,
                >>::from_account_id(account_id),
            }
        }
    }
    impl ::ink::ToAccountId<Environment> for ProsopoRef {
        #[inline]
        fn to_account_id(&self) -> AccountId {
            <<Prosopo as ::ink::codegen::ContractCallBuilder>::Type as ::ink::ToAccountId<
                Environment,
            >>::to_account_id(&self.inner)
        }
    }
    #[cfg(feature = "std")]
    #[cfg(not(feature = "ink-as-dependency"))]
    const _: () = {
        #[no_mangle]
        pub fn __ink_generate_metadata() -> ::ink::metadata::InkProject {
            let layout = ::ink::metadata::layout::Layout::Root(
                ::ink::metadata::layout::RootLayout::new(
                    <::ink::metadata::layout::LayoutKey as ::core::convert::From<
                        ::ink::primitives::Key,
                    >>::from(<Prosopo as ::ink::storage::traits::StorageKey>::KEY),
                    <Prosopo as ::ink::storage::traits::StorageLayout>::layout(
                        &<Prosopo as ::ink::storage::traits::StorageKey>::KEY,
                    ),
                ),
            );
            ::ink::metadata::layout::ValidateLayout::validate(&layout)
                .unwrap_or_else(|error| {
                    ::core::panicking::panic_fmt(
                        format_args!("metadata ink! generation failed: {0}", error),
                    )
                });
            ::ink::metadata::InkProject::new(
                layout,
                ::ink::metadata::ContractSpec::new()
                    .constructors([
                        ::ink::metadata::ConstructorSpec::from_label("default")
                            .selector([0xED_u8, 0x4B_u8, 0x9D_u8, 0x1B_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("operator_accounts")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Vec<AccountId>,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Vec"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new(
                                        "provider_stake_default",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u128,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u128"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("dapp_stake_default")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u128,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u128"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new(
                                        "max_user_history_len",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u16,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u16"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new(
                                        "max_user_history_age",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u64,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u64"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .payable(true)
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    if <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                        3981155611u32,
                                    >>::IS_RESULT {
                                        ::core::option::Option::Some(
                                            ::ink::metadata::TypeSpec::with_name_str::<
                                                ::ink::ConstructorResult<
                                                    ::core::result::Result<
                                                        (),
                                                        <Prosopo as ::ink::reflect::DispatchableConstructorInfo<
                                                            3981155611u32,
                                                        >>::Error,
                                                    >,
                                                >,
                                            >("ink_primitives::ConstructorResult"),
                                        )
                                    } else {
                                        ::core::option::Option::Some(
                                            ::ink::metadata::TypeSpec::with_name_str::<
                                                ::ink::ConstructorResult<()>,
                                            >("ink_primitives::ConstructorResult"),
                                        )
                                    },
                                ),
                            )
                            .docs([" Constructor"])
                            .done(),
                    ])
                    .messages([
                        ::ink::metadata::MessageSpec::from_label(
                                "get_provider_stake_default",
                            )
                            .selector([0xF6_u8, 0xC0_u8, 0x05_u8, 0x65_u8])
                            .args([])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<u128>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([" Get contract provider minimum stake default."])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "get_dapp_stake_default",
                            )
                            .selector([0x76_u8, 0xE2_u8, 0x61_u8, 0x91_u8])
                            .args([])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<u128>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([" Get contract dapp minimum stake default."])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_register")
                            .selector([0xC6_u8, 0x6F_u8, 0x9A_u8, 0x2A_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("service_origin")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("fee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u32,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u32"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("payee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Payee,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Payee"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([" Register a provider, their service origin and fee"])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_update")
                            .selector([0xD2_u8, 0xF7_u8, 0x0D_u8, 0xE8_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("service_origin")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("fee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u32,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u32"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("payee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Payee,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Payee"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(true)
                            .docs([
                                " Update an existing provider, their service origin, fee and deposit funds",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_deregister")
                            .selector([0x5E_u8, 0xFF_u8, 0x53_u8, 0xCF_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("provider_account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([
                                " De-Register a provider by setting their status to Deactivated",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_unstake")
                            .selector([0x95_u8, 0x98_u8, 0x0B_u8, 0x6F_u8])
                            .args([])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(true)
                            .docs([
                                " Unstake and deactivate the provider's service, returning stake",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_add_dataset")
                            .selector([0x75_u8, 0x98_u8, 0x0E_u8, 0xA7_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("dataset_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("dataset_id_content")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([" Add a new data set"])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("dapp_register")
                            .selector([0x42_u8, 0xB4_u8, 0x5E_u8, 0xFA_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("payee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            DappPayee,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["DappPayee"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([" Register a dapp"])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("dapp_fund")
                            .selector([0x55_u8, 0xDA_u8, 0x62_u8, 0xA9_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(true)
                            .docs([
                                " Fund dapp account to pay for services, if the Dapp caller is registered in self.dapps",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("dapp_cancel")
                            .selector([0x3B_u8, 0x2A_u8, 0x70_u8, 0x48_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([
                                " Cancel services as a dapp, returning remaining tokens",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("dapp_user_commit")
                            .selector([0x5B_u8, 0x96_u8, 0x5E_u8, 0xAB_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("dataset_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new(
                                        "user_merkle_tree_root",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("provider")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("dapp_user")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("status_option")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Option<CaptchaStatus>,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Option"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([" Submit a captcha solution commit"])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_approve")
                            .selector([0xD3_u8, 0x36_u8, 0x25_u8, 0xC0_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new(
                                        "captcha_solution_commitment_id",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("transaction_fee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([
                                " Approve a solution commitment, increment correct captchas, and refund the users tx fee",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("provider_disapprove")
                            .selector([0xB0_u8, 0x4F_u8, 0xD5_u8, 0xFB_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new(
                                        "captcha_solution_commitment_id",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<(), Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([
                                " Disapprove a solution commitment and increment incorrect captchas",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "dapp_operator_is_human_user",
                            )
                            .selector([0xBE_u8, 0x7B_u8, 0x6E_u8, 0xF9_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("user")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("threshold")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u8,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u8"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<bool, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Checks if the user is a human (true) as they have a solution rate higher than a % threshold or a bot (false)",
                                " Threshold is decided by the calling user",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "dapp_operator_last_correct_captcha",
                            )
                            .selector([0xBE_u8, 0x93_u8, 0x0F_u8, 0x18_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("user")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<LastCorrectCaptcha, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_captcha_data")
                            .selector([0x7A_u8, 0x54_u8, 0x15_u8, 0x8D_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("dataset_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<CaptchaData, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a single captcha dataset",
                                "",
                                " Returns an error if the dapp does not exist",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_dapp_user")
                            .selector([0x42_u8, 0xDD_u8, 0x7F_u8, 0x6B_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("dapp_user_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<User, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a dapp user",
                                "",
                                " Returns an error if the user does not exist",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_provider_details")
                            .selector([0x81_u8, 0x2D_u8, 0x61_u8, 0xE2_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("accountid")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Provider, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a single provider's details",
                                "",
                                " Returns an error if the user does not exist",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_dapp_details")
                            .selector([0xB3_u8, 0xDF_u8, 0xDA_u8, 0xF9_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Dapp, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a single dapps details",
                                "",
                                " Returns an error if the dapp does not exist",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "get_captcha_solution_commitment",
                            )
                            .selector([0x02_u8, 0x8E_u8, 0xBE_u8, 0x00_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new(
                                        "captcha_solution_commitment_id",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<
                                            Result<CaptchaSolutionCommitment, Error>,
                                        >,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a solution commitment",
                                "",
                                " Returns an error if the commitment does not exist",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_dapp_balance")
                            .selector([0xF8_u8, 0xFD_u8, 0x50_u8, 0x66_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("dapp")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Balance, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Returns the account balance for the specified `dapp`.",
                                "",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_provider_balance")
                            .selector([0x99_u8, 0x8D_u8, 0x52_u8, 0x2C_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("provider")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Balance, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Returns the account balance for the specified `provider`.",
                                "",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "get_operator_code_hash_votes",
                            )
                            .selector([0x84_u8, 0xF3_u8, 0x44_u8, 0xF6_u8])
                            .args([])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Vec<OperatorCodeHashVote>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([" Returns the operator votes for code hashes"])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("list_providers_by_ids")
                            .selector([0xD5_u8, 0x42_u8, 0x16_u8, 0x0B_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("provider_ids")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Vec<AccountId>,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Vec"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Vec<Provider>, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " List providers given an array of account id",
                                "",
                                " Returns empty if none were matched",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "list_providers_by_status",
                            )
                            .selector([0x54_u8, 0xB2_u8, 0x8A_u8, 0xB4_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("statuses")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Vec<GovernanceStatus>,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Vec"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Vec<Provider>, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " List providers given an array of status",
                                "",
                                " Returns empty if none were matched",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "get_random_active_provider",
                            )
                            .selector([0x4A_u8, 0xEE_u8, 0x5B_u8, 0xAD_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("user_account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new(
                                        "dapp_contract_account",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<RandomProvider, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a random active provider",
                                "",
                                " Returns error if no active provider is found",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_all_provider_ids")
                            .selector([0xD2_u8, 0xED_u8, 0x90_u8, 0xD7_u8])
                            .args([])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<Vec<AccountId>, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get the AccountIds of all Providers ever registered",
                                "",
                                " Returns {Vec<AccountId>}",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("get_random_number")
                            .selector([0x23_u8, 0x06_u8, 0xAE_u8, 0xCD_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("len")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u128,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u128"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                                ::ink::metadata::MessageParamSpec::new("user_account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<u128>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a random number from 0 to `len` - 1 inclusive. The user account is added to the seed for additional random entropy.",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label(
                                "get_random_number_caller",
                            )
                            .selector([0x64_u8, 0x02_u8, 0xE7_u8, 0x71_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("len")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            u128,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["u128"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<u128>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(false)
                            .payable(false)
                            .docs([
                                " Get a random number from 0 to `len` - 1 inclusive. Uses the caller account for additional random entropy.",
                            ])
                            .done(),
                        ::ink::metadata::MessageSpec::from_label("operator_set_code")
                            .selector([0x00_u8, 0xAE_u8, 0x58_u8, 0x5A_u8])
                            .args([
                                ::ink::metadata::MessageParamSpec::new("code_hash")
                                    .of_type(::ink::metadata::TypeSpec::of_type::<[u8; 32]>())
                                    .done(),
                            ])
                            .returns(
                                ::ink::metadata::ReturnTypeSpec::new(
                                    ::ink::metadata::TypeSpec::with_name_segs::<
                                        ::ink::MessageResult<Result<bool, Error>>,
                                        _,
                                    >(
                                        ::core::iter::Iterator::map(
                                            ::core::iter::IntoIterator::into_iter([
                                                "ink",
                                                "MessageResult",
                                            ]),
                                            ::core::convert::AsRef::as_ref,
                                        ),
                                    ),
                                ),
                            )
                            .mutates(true)
                            .payable(false)
                            .docs([
                                " Modifies the code which is used to execute calls to this contract address (`AccountId`).",
                                " We use this to upgrade the contract logic. The caller must be an operator.",
                                " `true` is returned on successful upgrade, `false` otherwise",
                                " Errors are returned if the caller is not an operator, if the code hash is the callers",
                                " account_id, if the code is not found, and for any other unknown ink errors",
                            ])
                            .done(),
                    ])
                    .events([
                        ::ink::metadata::EventSpec::new("ProviderRegister")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderDeregister")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderUpdate")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderStake")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderAddDataset")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("dataset_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("dataset_id_content")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderUnstake")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderApprove")
                            .args([
                                ::ink::metadata::EventParamSpec::new(
                                        "captcha_solution_commitment_id",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("ProviderDisapprove")
                            .args([
                                ::ink::metadata::EventParamSpec::new(
                                        "captcha_solution_commitment_id",
                                    )
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("DappRegister")
                            .args([
                                ::ink::metadata::EventParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("owner")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("payee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            DappPayee,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["DappPayee"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("status")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            GovernanceStatus,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["GovernanceStatus"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("DappUpdate")
                            .args([
                                ::ink::metadata::EventParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("owner")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("payee")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            DappPayee,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["DappPayee"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("status")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            GovernanceStatus,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["GovernanceStatus"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("DappFund")
                            .args([
                                ::ink::metadata::EventParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("DappCancel")
                            .args([
                                ::ink::metadata::EventParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("value")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Balance,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Balance"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                        ::ink::metadata::EventSpec::new("DappUserCommit")
                            .args([
                                ::ink::metadata::EventParamSpec::new("account")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(true)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("merkle_tree_root")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("contract")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            AccountId,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["AccountId"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                                ::ink::metadata::EventParamSpec::new("dataset_id")
                                    .of_type(
                                        ::ink::metadata::TypeSpec::with_name_segs::<
                                            Hash,
                                            _,
                                        >(
                                            ::core::iter::Iterator::map(
                                                ::core::iter::IntoIterator::into_iter(["Hash"]),
                                                ::core::convert::AsRef::as_ref,
                                            ),
                                        ),
                                    )
                                    .indexed(false)
                                    .docs([])
                                    .done(),
                            ])
                            .docs([])
                            .done(),
                    ])
                    .docs([])
                    .lang_error(
                        ::ink::metadata::TypeSpec::with_name_segs::<
                            ::ink::LangError,
                            _,
                        >(
                            ::core::iter::Iterator::map(
                                ::core::iter::IntoIterator::into_iter(["ink", "LangError"]),
                                ::core::convert::AsRef::as_ref,
                            ),
                        ),
                    )
                    .done(),
            )
        }
    };
    use ink::env::debug_println as debug;
    use ink::env::hash::{Blake2x128, CryptoHash, HashOutput};
    use ink::prelude::collections::btree_set::BTreeSet;
    use ink::prelude::vec::Vec;
    use ink::storage::Lazy;
    #[allow(unused_imports)]
    use ink::storage::{traits::StorageLayout, Mapping};
    /// GovernanceStatus relates to DApps and Providers and determines if they are active or not
    pub enum GovernanceStatus {
        Active,
        Suspended,
        #[default]
        Deactivated,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for GovernanceStatus {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("GovernanceStatus", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "GovernanceStatus relates to DApps and Providers and determines if they are active or not",
                        ],
                    )
                    .variant(
                        ::scale_info::build::Variants::new()
                            .variant(
                                "Active",
                                |v| v.index(0usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Suspended",
                                |v| v.index(1usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Deactivated",
                                |v| v.index(2usize as ::core::primitive::u8),
                            ),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for GovernanceStatus {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Enum(
                    ::ink::metadata::layout::EnumLayout::new(
                        "GovernanceStatus",
                        ::ink::metadata::layout::LayoutKey::from(__key),
                        [
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(0usize),
                                    ::ink::metadata::layout::StructLayout::new("Active", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(1usize),
                                    ::ink::metadata::layout::StructLayout::new("Suspended", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(2usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "Deactivated",
                                        [],
                                    ),
                                )
                            },
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::default::Default for GovernanceStatus {
        #[inline]
        fn default() -> GovernanceStatus {
            Self::Deactivated
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for GovernanceStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for GovernanceStatus {
        #[inline]
        fn eq(&self, other: &GovernanceStatus) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for GovernanceStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    GovernanceStatus::Active => "Active",
                    GovernanceStatus::Suspended => "Suspended",
                    GovernanceStatus::Deactivated => "Deactivated",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for GovernanceStatus {}
    #[automatically_derived]
    impl ::core::cmp::Eq for GovernanceStatus {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::clone::Clone for GovernanceStatus {
        #[inline]
        fn clone(&self) -> GovernanceStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for GovernanceStatus {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for GovernanceStatus {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    GovernanceStatus::Active => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    }
                    GovernanceStatus::Suspended => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                    }
                    GovernanceStatus::Deactivated => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for GovernanceStatus {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for GovernanceStatus {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e
                            .chain(
                                "Could not decode `GovernanceStatus`, failed to read variant byte",
                            )
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(GovernanceStatus::Active)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(GovernanceStatus::Suspended)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(GovernanceStatus::Deactivated)
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into(
                                "Could not decode `GovernanceStatus`, variant doesn't exist",
                            ),
                        )
                    }
                }
            }
        }
    };
    /// CaptchaStatus is the status of a CaptchaSolutionCommitment, submitted by a DappUser
    pub enum CaptchaStatus {
        Pending,
        Approved,
        #[default]
        Disapproved,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for CaptchaStatus {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("CaptchaStatus", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "CaptchaStatus is the status of a CaptchaSolutionCommitment, submitted by a DappUser",
                        ],
                    )
                    .variant(
                        ::scale_info::build::Variants::new()
                            .variant(
                                "Pending",
                                |v| v.index(0usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Approved",
                                |v| v.index(1usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Disapproved",
                                |v| v.index(2usize as ::core::primitive::u8),
                            ),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for CaptchaStatus {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Enum(
                    ::ink::metadata::layout::EnumLayout::new(
                        "CaptchaStatus",
                        ::ink::metadata::layout::LayoutKey::from(__key),
                        [
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(0usize),
                                    ::ink::metadata::layout::StructLayout::new("Pending", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(1usize),
                                    ::ink::metadata::layout::StructLayout::new("Approved", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(2usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "Disapproved",
                                        [],
                                    ),
                                )
                            },
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::default::Default for CaptchaStatus {
        #[inline]
        fn default() -> CaptchaStatus {
            Self::Disapproved
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for CaptchaStatus {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for CaptchaStatus {
        #[inline]
        fn eq(&self, other: &CaptchaStatus) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for CaptchaStatus {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    CaptchaStatus::Pending => "Pending",
                    CaptchaStatus::Approved => "Approved",
                    CaptchaStatus::Disapproved => "Disapproved",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for CaptchaStatus {}
    #[automatically_derived]
    impl ::core::cmp::Eq for CaptchaStatus {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::clone::Clone for CaptchaStatus {
        #[inline]
        fn clone(&self) -> CaptchaStatus {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for CaptchaStatus {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for CaptchaStatus {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    CaptchaStatus::Pending => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    }
                    CaptchaStatus::Approved => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                    }
                    CaptchaStatus::Disapproved => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for CaptchaStatus {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for CaptchaStatus {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e
                            .chain(
                                "Could not decode `CaptchaStatus`, failed to read variant byte",
                            )
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(CaptchaStatus::Pending)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(CaptchaStatus::Approved)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(CaptchaStatus::Disapproved)
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into(
                                "Could not decode `CaptchaStatus`, variant doesn't exist",
                            ),
                        )
                    }
                }
            }
        }
    };
    /// Payee is the recipient of any fees that are paid when a CaptchaSolutionCommitment is approved
    pub enum Payee {
        Provider,
        #[default]
        Dapp,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Payee {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Payee", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "Payee is the recipient of any fees that are paid when a CaptchaSolutionCommitment is approved",
                        ],
                    )
                    .variant(
                        ::scale_info::build::Variants::new()
                            .variant(
                                "Provider",
                                |v| v.index(0usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Dapp",
                                |v| v.index(1usize as ::core::primitive::u8),
                            ),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Payee {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Enum(
                    ::ink::metadata::layout::EnumLayout::new(
                        "Payee",
                        ::ink::metadata::layout::LayoutKey::from(__key),
                        [
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(0usize),
                                    ::ink::metadata::layout::StructLayout::new("Provider", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(1usize),
                                    ::ink::metadata::layout::StructLayout::new("Dapp", []),
                                )
                            },
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::default::Default for Payee {
        #[inline]
        fn default() -> Payee {
            Self::Dapp
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Payee {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Payee {
        #[inline]
        fn eq(&self, other: &Payee) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Payee {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Payee::Provider => "Provider",
                    Payee::Dapp => "Dapp",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Payee {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Payee {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Payee {
        #[inline]
        fn clone(&self) -> Payee {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Payee {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for Payee {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    Payee::Provider => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    }
                    Payee::Dapp => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for Payee {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for Payee {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e.chain("Could not decode `Payee`, failed to read variant byte")
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Payee::Provider)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Payee::Dapp)
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into("Could not decode `Payee`, variant doesn't exist"),
                        )
                    }
                }
            }
        }
    };
    /// Dapps must be able to filter Providers by their Payee when they are searching for a Provider
    pub enum DappPayee {
        Provider,
        Dapp,
        #[default]
        Any,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for DappPayee {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("DappPayee", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "Dapps must be able to filter Providers by their Payee when they are searching for a Provider",
                        ],
                    )
                    .variant(
                        ::scale_info::build::Variants::new()
                            .variant(
                                "Provider",
                                |v| v.index(0usize as ::core::primitive::u8),
                            )
                            .variant(
                                "Dapp",
                                |v| v.index(1usize as ::core::primitive::u8),
                            )
                            .variant("Any", |v| v.index(2usize as ::core::primitive::u8)),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for DappPayee {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Enum(
                    ::ink::metadata::layout::EnumLayout::new(
                        "DappPayee",
                        ::ink::metadata::layout::LayoutKey::from(__key),
                        [
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(0usize),
                                    ::ink::metadata::layout::StructLayout::new("Provider", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(1usize),
                                    ::ink::metadata::layout::StructLayout::new("Dapp", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(2usize),
                                    ::ink::metadata::layout::StructLayout::new("Any", []),
                                )
                            },
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::default::Default for DappPayee {
        #[inline]
        fn default() -> DappPayee {
            Self::Any
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for DappPayee {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for DappPayee {
        #[inline]
        fn eq(&self, other: &DappPayee) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for DappPayee {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    DappPayee::Provider => "Provider",
                    DappPayee::Dapp => "Dapp",
                    DappPayee::Any => "Any",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for DappPayee {}
    #[automatically_derived]
    impl ::core::cmp::Eq for DappPayee {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::clone::Clone for DappPayee {
        #[inline]
        fn clone(&self) -> DappPayee {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for DappPayee {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for DappPayee {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    DappPayee::Provider => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    }
                    DappPayee::Dapp => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                    }
                    DappPayee::Any => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for DappPayee {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for DappPayee {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e
                            .chain(
                                "Could not decode `DappPayee`, failed to read variant byte",
                            )
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(DappPayee::Provider)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(DappPayee::Dapp)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(DappPayee::Any)
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into(
                                "Could not decode `DappPayee`, variant doesn't exist",
                            ),
                        )
                    }
                }
            }
        }
    };
    impl TryFrom<DappPayee> for Payee {
        type Error = ();
        fn try_from(dapp_payee: DappPayee) -> Result<Self, Self::Error> {
            match dapp_payee {
                DappPayee::Provider => Ok(Payee::Provider),
                DappPayee::Dapp => Ok(Payee::Dapp),
                DappPayee::Any => Err(()),
            }
        }
    }
    impl TryFrom<Payee> for DappPayee {
        type Error = ();
        fn try_from(payee: Payee) -> Result<Self, Self::Error> {
            match payee {
                Payee::Provider => Ok(DappPayee::Provider),
                Payee::Dapp => Ok(DappPayee::Dapp),
            }
        }
    }
    /// Providers are suppliers of human verification methods (captchas, etc.) to DappUsers, either
    /// paying or receiving a fee for this service.
    pub struct Provider {
        status: GovernanceStatus,
        balance: Balance,
        fee: u32,
        payee: Payee,
        service_origin: Hash,
        dataset_id: Hash,
        dataset_id_content: Hash,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Provider {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Provider", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "Providers are suppliers of human verification methods (captchas, etc.) to DappUsers, either",
                            "paying or receiving a fee for this service.",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("balance").type_name("Balance")
                            })
                            .field(|f| f.ty::<u32>().name("fee").type_name("u32"))
                            .field(|f| f.ty::<Payee>().name("payee").type_name("Payee"))
                            .field(|f| {
                                f.ty::<Hash>().name("service_origin").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id_content").type_name("Hash")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Provider {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "Provider",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "balance",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "fee",
                                <u32 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "payee",
                                <Payee as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "service_origin",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id_content",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Provider {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Provider {
        #[inline]
        fn eq(&self, other: &Provider) -> bool {
            self.status == other.status && self.balance == other.balance
                && self.fee == other.fee && self.payee == other.payee
                && self.service_origin == other.service_origin
                && self.dataset_id == other.dataset_id
                && self.dataset_id_content == other.dataset_id_content
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Provider {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "status",
                "balance",
                "fee",
                "payee",
                "service_origin",
                "dataset_id",
                "dataset_id_content",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.status,
                &self.balance,
                &self.fee,
                &self.payee,
                &self.service_origin,
                &self.dataset_id,
                &&self.dataset_id_content,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "Provider",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Provider {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Provider {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
            let _: ::core::cmp::AssertParamIsEq<u32>;
            let _: ::core::cmp::AssertParamIsEq<Payee>;
            let _: ::core::cmp::AssertParamIsEq<Hash>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Provider {
        #[inline]
        fn clone(&self) -> Provider {
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            let _: ::core::clone::AssertParamIsClone<u32>;
            let _: ::core::clone::AssertParamIsClone<Payee>;
            let _: ::core::clone::AssertParamIsClone<Hash>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Provider {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for Provider {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.balance, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.fee, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.payee, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.service_origin, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id_content, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for Provider {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for Provider {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(Provider {
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    balance: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::balance`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    fee: {
                        let __codec_res_edqy = <u32 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::fee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    payee: {
                        let __codec_res_edqy = <Payee as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::payee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    service_origin: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::service_origin`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::dataset_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id_content: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Provider::dataset_id_content`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// RandomProvider is selected randomly by the contract for the client side application
    pub struct RandomProvider {
        provider_id: AccountId,
        provider: Provider,
        block_number: u32,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for RandomProvider {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("RandomProvider", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "RandomProvider is selected randomly by the contract for the client side application",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<AccountId>()
                                    .name("provider_id")
                                    .type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Provider>().name("provider").type_name("Provider")
                            })
                            .field(|f| {
                                f.ty::<u32>().name("block_number").type_name("u32")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for RandomProvider {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "RandomProvider",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider_id",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider",
                                <Provider as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "block_number",
                                <u32 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for RandomProvider {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for RandomProvider {
        #[inline]
        fn eq(&self, other: &RandomProvider) -> bool {
            self.provider_id == other.provider_id && self.provider == other.provider
                && self.block_number == other.block_number
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for RandomProvider {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "RandomProvider",
                "provider_id",
                &self.provider_id,
                "provider",
                &self.provider,
                "block_number",
                &&self.block_number,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for RandomProvider {}
    #[automatically_derived]
    impl ::core::cmp::Eq for RandomProvider {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Provider>;
            let _: ::core::cmp::AssertParamIsEq<u32>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for RandomProvider {
        #[inline]
        fn clone(&self) -> RandomProvider {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Provider>;
            let _: ::core::clone::AssertParamIsClone<u32>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for RandomProvider {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for RandomProvider {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.provider_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.provider, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.block_number, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for RandomProvider {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for RandomProvider {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(RandomProvider {
                    provider_id: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `RandomProvider::provider_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    provider: {
                        let __codec_res_edqy = <Provider as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `RandomProvider::provider`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    block_number: {
                        let __codec_res_edqy = <u32 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `RandomProvider::block_number`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// Operators are controllers of this contract with admin rights
    pub struct Operator {
        status: GovernanceStatus,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Operator {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Operator", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &["Operators are controllers of this contract with admin rights"],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Operator {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "Operator",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Operator {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Operator {
        #[inline]
        fn eq(&self, other: &Operator) -> bool {
            self.status == other.status
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Operator {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "Operator",
                "status",
                &&self.status,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Operator {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Operator {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Operator {
        #[inline]
        fn clone(&self) -> Operator {
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Operator {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for Operator {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.status, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.status)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.status, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for Operator {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for Operator {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(Operator {
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Operator::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// CaptchaData contains the hashed root of a Provider's dataset and is used to verify that
    /// the captchas received by a DappUser did belong to the Provider's original dataset
    pub struct CaptchaData {
        provider: AccountId,
        dataset_id: Hash,
        dataset_id_content: Hash,
        captcha_type: u16,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for CaptchaData {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("CaptchaData", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "CaptchaData contains the hashed root of a Provider's dataset and is used to verify that",
                            "the captchas received by a DappUser did belong to the Provider's original dataset",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("provider").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id_content").type_name("Hash")
                            })
                            .field(|f| {
                                f.ty::<u16>().name("captcha_type").type_name("u16")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for CaptchaData {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "CaptchaData",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id_content",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "captcha_type",
                                <u16 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for CaptchaData {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for CaptchaData {
        #[inline]
        fn eq(&self, other: &CaptchaData) -> bool {
            self.provider == other.provider && self.dataset_id == other.dataset_id
                && self.dataset_id_content == other.dataset_id_content
                && self.captcha_type == other.captcha_type
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for CaptchaData {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field4_finish(
                f,
                "CaptchaData",
                "provider",
                &self.provider,
                "dataset_id",
                &self.dataset_id,
                "dataset_id_content",
                &self.dataset_id_content,
                "captcha_type",
                &&self.captcha_type,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for CaptchaData {}
    #[automatically_derived]
    impl ::core::cmp::Eq for CaptchaData {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Hash>;
            let _: ::core::cmp::AssertParamIsEq<u16>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for CaptchaData {
        #[inline]
        fn clone(&self) -> CaptchaData {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Hash>;
            let _: ::core::clone::AssertParamIsClone<u16>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for CaptchaData {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for CaptchaData {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.provider, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id_content, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.captcha_type, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for CaptchaData {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for CaptchaData {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(CaptchaData {
                    provider: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `CaptchaData::provider`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `CaptchaData::dataset_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id_content: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain("Could not decode `CaptchaData::dataset_id_content`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    captcha_type: {
                        let __codec_res_edqy = <u16 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `CaptchaData::captcha_type`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// CaptchaSolutionCommitments are submitted by DAppUsers upon completion of one or more
    /// Captchas. They serve as proof of captcha completion to the outside world and can be used
    /// in dispute resolution.
    pub struct CaptchaSolutionCommitment {
        account: AccountId,
        dataset_id: Hash,
        status: CaptchaStatus,
        contract: AccountId,
        provider: AccountId,
        completed_at: Timestamp,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for CaptchaSolutionCommitment {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new(
                            "CaptchaSolutionCommitment",
                            "prosopo::prosopo",
                        ),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "CaptchaSolutionCommitments are submitted by DAppUsers upon completion of one or more",
                            "Captchas. They serve as proof of captcha completion to the outside world and can be used",
                            "in dispute resolution.",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<AccountId>().name("account").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<Hash>().name("dataset_id").type_name("Hash")
                            })
                            .field(|f| {
                                f
                                    .ty::<CaptchaStatus>()
                                    .name("status")
                                    .type_name("CaptchaStatus")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("contract").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("provider").type_name("AccountId")
                            })
                            .field(|f| {
                                f
                                    .ty::<Timestamp>()
                                    .name("completed_at")
                                    .type_name("Timestamp")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for CaptchaSolutionCommitment {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "CaptchaSolutionCommitment",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dataset_id",
                                <Hash as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <CaptchaStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "contract",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "provider",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "completed_at",
                                <Timestamp as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for CaptchaSolutionCommitment {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for CaptchaSolutionCommitment {
        #[inline]
        fn eq(&self, other: &CaptchaSolutionCommitment) -> bool {
            self.account == other.account && self.dataset_id == other.dataset_id
                && self.status == other.status && self.contract == other.contract
                && self.provider == other.provider
                && self.completed_at == other.completed_at
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for CaptchaSolutionCommitment {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            let names: &'static _ = &[
                "account",
                "dataset_id",
                "status",
                "contract",
                "provider",
                "completed_at",
            ];
            let values: &[&dyn ::core::fmt::Debug] = &[
                &self.account,
                &self.dataset_id,
                &self.status,
                &self.contract,
                &self.provider,
                &&self.completed_at,
            ];
            ::core::fmt::Formatter::debug_struct_fields_finish(
                f,
                "CaptchaSolutionCommitment",
                names,
                values,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for CaptchaSolutionCommitment {}
    #[automatically_derived]
    impl ::core::cmp::Eq for CaptchaSolutionCommitment {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<Hash>;
            let _: ::core::cmp::AssertParamIsEq<CaptchaStatus>;
            let _: ::core::cmp::AssertParamIsEq<Timestamp>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for CaptchaSolutionCommitment {
        #[inline]
        fn clone(&self) -> CaptchaSolutionCommitment {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<Hash>;
            let _: ::core::clone::AssertParamIsClone<CaptchaStatus>;
            let _: ::core::clone::AssertParamIsClone<Timestamp>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for CaptchaSolutionCommitment {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for CaptchaSolutionCommitment {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dataset_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.contract, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.provider, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.completed_at, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for CaptchaSolutionCommitment {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for CaptchaSolutionCommitment {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(CaptchaSolutionCommitment {
                    account: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::account`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dataset_id: {
                        let __codec_res_edqy = <Hash as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::dataset_id`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    status: {
                        let __codec_res_edqy = <CaptchaStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::status`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    contract: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::contract`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    provider: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::provider`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    completed_at: {
                        let __codec_res_edqy = <Timestamp as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `CaptchaSolutionCommitment::completed_at`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// DApps are distributed apps who want their users to be verified by Providers, either paying
    /// or receiving a fee for this service.
    pub struct Dapp {
        status: GovernanceStatus,
        balance: Balance,
        owner: AccountId,
        min_difficulty: u16,
        payee: DappPayee,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Dapp {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Dapp", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "DApps are distributed apps who want their users to be verified by Providers, either paying",
                            "or receiving a fee for this service.",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            })
                            .field(|f| {
                                f.ty::<Balance>().name("balance").type_name("Balance")
                            })
                            .field(|f| {
                                f.ty::<AccountId>().name("owner").type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<u16>().name("min_difficulty").type_name("u16")
                            })
                            .field(|f| {
                                f.ty::<DappPayee>().name("payee").type_name("DappPayee")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Dapp {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "Dapp",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "balance",
                                <Balance as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "owner",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "min_difficulty",
                                <u16 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "payee",
                                <DappPayee as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Dapp {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Dapp {
        #[inline]
        fn eq(&self, other: &Dapp) -> bool {
            self.status == other.status && self.balance == other.balance
                && self.owner == other.owner
                && self.min_difficulty == other.min_difficulty
                && self.payee == other.payee
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Dapp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field5_finish(
                f,
                "Dapp",
                "status",
                &self.status,
                "balance",
                &self.balance,
                "owner",
                &self.owner,
                "min_difficulty",
                &self.min_difficulty,
                "payee",
                &&self.payee,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Dapp {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Dapp {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
            let _: ::core::cmp::AssertParamIsEq<Balance>;
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<u16>;
            let _: ::core::cmp::AssertParamIsEq<DappPayee>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Dapp {
        #[inline]
        fn clone(&self) -> Dapp {
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            let _: ::core::clone::AssertParamIsClone<Balance>;
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<u16>;
            let _: ::core::clone::AssertParamIsClone<DappPayee>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Dapp {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for Dapp {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.balance, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.owner, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.min_difficulty, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.payee, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for Dapp {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for Dapp {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(Dapp {
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Dapp::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    balance: {
                        let __codec_res_edqy = <Balance as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Dapp::balance`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    owner: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Dapp::owner`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    min_difficulty: {
                        let __codec_res_edqy = <u16 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Dapp::min_difficulty`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    payee: {
                        let __codec_res_edqy = <DappPayee as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `Dapp::payee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// Users are the users of DApps that are required to be verified as human before they are
    /// allowed to interact with the DApps' contracts.
    pub struct User {
        history: Vec<Hash>,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for User {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("User", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "Users are the users of DApps that are required to be verified as human before they are",
                            "allowed to interact with the DApps' contracts.",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f.ty::<Vec<Hash>>().name("history").type_name("Vec<Hash>")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for User {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "User",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "history",
                                <Vec<
                                    Hash,
                                > as ::ink::storage::traits::StorageLayout>::layout(__key),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for User {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for User {
        #[inline]
        fn eq(&self, other: &User) -> bool {
            self.history == other.history
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for User {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field1_finish(
                f,
                "User",
                "history",
                &&self.history,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for User {}
    #[automatically_derived]
    impl ::core::cmp::Eq for User {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<Vec<Hash>>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for User {
        #[inline]
        fn clone(&self) -> User {
            User {
                history: ::core::clone::Clone::clone(&self.history),
            }
        }
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for User {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&&self.history, __codec_dest_edqy)
            }
            fn encode(&self) -> ::scale::alloc::vec::Vec<::core::primitive::u8> {
                ::scale::Encode::encode(&&self.history)
            }
            fn using_encoded<R, F: ::core::ops::FnOnce(&[::core::primitive::u8]) -> R>(
                &self,
                f: F,
            ) -> R {
                ::scale::Encode::using_encoded(&&self.history, f)
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for User {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for User {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(User {
                    history: {
                        let __codec_res_edqy = <Vec<
                            Hash,
                        > as ::scale::Decode>::decode(__codec_input_edqy);
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `User::history`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// The summary of a user's captcha history using the n most recent captcha results limited by age and number of captcha results
    pub struct UserHistorySummary {
        pub correct: u16,
        pub incorrect: u16,
        pub score: u8,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for UserHistorySummary {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("UserHistorySummary", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .docs(
                        &[
                            "The summary of a user's captcha history using the n most recent captcha results limited by age and number of captcha results",
                        ],
                    )
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| f.ty::<u16>().name("correct").type_name("u16"))
                            .field(|f| f.ty::<u16>().name("incorrect").type_name("u16"))
                            .field(|f| f.ty::<u8>().name("score").type_name("u8")),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for UserHistorySummary {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "UserHistorySummary",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "correct",
                                <u16 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "incorrect",
                                <u16 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "score",
                                <u8 as ::ink::storage::traits::StorageLayout>::layout(__key),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for UserHistorySummary {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for UserHistorySummary {
        #[inline]
        fn eq(&self, other: &UserHistorySummary) -> bool {
            self.correct == other.correct && self.incorrect == other.incorrect
                && self.score == other.score
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for UserHistorySummary {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field3_finish(
                f,
                "UserHistorySummary",
                "correct",
                &self.correct,
                "incorrect",
                &self.incorrect,
                "score",
                &&self.score,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for UserHistorySummary {}
    #[automatically_derived]
    impl ::core::cmp::Eq for UserHistorySummary {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u16>;
            let _: ::core::cmp::AssertParamIsEq<u8>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for UserHistorySummary {
        #[inline]
        fn clone(&self) -> UserHistorySummary {
            let _: ::core::clone::AssertParamIsClone<u16>;
            let _: ::core::clone::AssertParamIsClone<u8>;
            *self
        }
    }
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for UserHistorySummary {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.correct, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.incorrect, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.score, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for UserHistorySummary {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for UserHistorySummary {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(UserHistorySummary {
                    correct: {
                        let __codec_res_edqy = <u16 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `UserHistorySummary::correct`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    incorrect: {
                        let __codec_res_edqy = <u16 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `UserHistorySummary::incorrect`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    score: {
                        let __codec_res_edqy = <u8 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `UserHistorySummary::score`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::Copy for UserHistorySummary {}
    pub struct LastCorrectCaptcha {
        pub before_ms: u64,
        pub dapp_id: AccountId,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for LastCorrectCaptcha {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new("LastCorrectCaptcha", "prosopo::prosopo"),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| f.ty::<u64>().name("before_ms").type_name("u64"))
                            .field(|f| {
                                f.ty::<AccountId>().name("dapp_id").type_name("AccountId")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for LastCorrectCaptcha {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "LastCorrectCaptcha",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "before_ms",
                                <u64 as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "dapp_id",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for LastCorrectCaptcha {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for LastCorrectCaptcha {
        #[inline]
        fn eq(&self, other: &LastCorrectCaptcha) -> bool {
            self.before_ms == other.before_ms && self.dapp_id == other.dapp_id
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for LastCorrectCaptcha {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "LastCorrectCaptcha",
                "before_ms",
                &self.before_ms,
                "dapp_id",
                &&self.dapp_id,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for LastCorrectCaptcha {}
    #[automatically_derived]
    impl ::core::cmp::Eq for LastCorrectCaptcha {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<u64>;
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for LastCorrectCaptcha {
        #[inline]
        fn clone(&self) -> LastCorrectCaptcha {
            let _: ::core::clone::AssertParamIsClone<u64>;
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for LastCorrectCaptcha {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for LastCorrectCaptcha {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.before_ms, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.dapp_id, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for LastCorrectCaptcha {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for LastCorrectCaptcha {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(LastCorrectCaptcha {
                    before_ms: {
                        let __codec_res_edqy = <u64 as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `LastCorrectCaptcha::before_ms`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    dapp_id: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `LastCorrectCaptcha::dapp_id`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    pub struct OperatorCodeHashVote {
        pub account_id: AccountId,
        pub code_hash: [u8; 32],
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for OperatorCodeHashVote {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(
                        ::scale_info::Path::new(
                            "OperatorCodeHashVote",
                            "prosopo::prosopo",
                        ),
                    )
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<AccountId>()
                                    .name("account_id")
                                    .type_name("AccountId")
                            })
                            .field(|f| {
                                f.ty::<[u8; 32]>().name("code_hash").type_name("[u8; 32]")
                            }),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for OperatorCodeHashVote {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "OperatorCodeHashVote",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "account_id",
                                <AccountId as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "code_hash",
                                <[u8; 32] as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for OperatorCodeHashVote {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for OperatorCodeHashVote {
        #[inline]
        fn eq(&self, other: &OperatorCodeHashVote) -> bool {
            self.account_id == other.account_id && self.code_hash == other.code_hash
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for OperatorCodeHashVote {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "OperatorCodeHashVote",
                "account_id",
                &self.account_id,
                "code_hash",
                &&self.code_hash,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for OperatorCodeHashVote {}
    #[automatically_derived]
    impl ::core::cmp::Eq for OperatorCodeHashVote {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<AccountId>;
            let _: ::core::cmp::AssertParamIsEq<[u8; 32]>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for OperatorCodeHashVote {
        #[inline]
        fn clone(&self) -> OperatorCodeHashVote {
            let _: ::core::clone::AssertParamIsClone<AccountId>;
            let _: ::core::clone::AssertParamIsClone<[u8; 32]>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for OperatorCodeHashVote {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for OperatorCodeHashVote {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.account_id, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.code_hash, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for OperatorCodeHashVote {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for OperatorCodeHashVote {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(OperatorCodeHashVote {
                    account_id: {
                        let __codec_res_edqy = <AccountId as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain(
                                            "Could not decode `OperatorCodeHashVote::account_id`",
                                        ),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    code_hash: {
                        let __codec_res_edqy = <[u8; 32] as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e
                                        .chain("Could not decode `OperatorCodeHashVote::code_hash`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    pub struct ProviderState {
        pub status: GovernanceStatus,
        pub payee: Payee,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for ProviderState {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("ProviderState", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .composite(
                        ::scale_info::build::Fields::named()
                            .field(|f| {
                                f
                                    .ty::<GovernanceStatus>()
                                    .name("status")
                                    .type_name("GovernanceStatus")
                            })
                            .field(|f| f.ty::<Payee>().name("payee").type_name("Payee")),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for ProviderState {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Struct(
                    ::ink::metadata::layout::StructLayout::new(
                        "ProviderState",
                        [
                            ::ink::metadata::layout::FieldLayout::new(
                                "status",
                                <GovernanceStatus as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                            ::ink::metadata::layout::FieldLayout::new(
                                "payee",
                                <Payee as ::ink::storage::traits::StorageLayout>::layout(
                                    __key,
                                ),
                            ),
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for ProviderState {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for ProviderState {
        #[inline]
        fn eq(&self, other: &ProviderState) -> bool {
            self.status == other.status && self.payee == other.payee
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ProviderState {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::debug_struct_field2_finish(
                f,
                "ProviderState",
                "status",
                &self.status,
                "payee",
                &&self.payee,
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for ProviderState {}
    #[automatically_derived]
    impl ::core::cmp::Eq for ProviderState {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {
            let _: ::core::cmp::AssertParamIsEq<GovernanceStatus>;
            let _: ::core::cmp::AssertParamIsEq<Payee>;
        }
    }
    #[automatically_derived]
    impl ::core::clone::Clone for ProviderState {
        #[inline]
        fn clone(&self) -> ProviderState {
            let _: ::core::clone::AssertParamIsClone<GovernanceStatus>;
            let _: ::core::clone::AssertParamIsClone<Payee>;
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for ProviderState {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for ProviderState {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                ::scale::Encode::encode_to(&self.status, __codec_dest_edqy);
                ::scale::Encode::encode_to(&self.payee, __codec_dest_edqy);
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for ProviderState {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for ProviderState {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                ::core::result::Result::Ok(ProviderState {
                    status: {
                        let __codec_res_edqy = <GovernanceStatus as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderState::status`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                    payee: {
                        let __codec_res_edqy = <Payee as ::scale::Decode>::decode(
                            __codec_input_edqy,
                        );
                        match __codec_res_edqy {
                            ::core::result::Result::Err(e) => {
                                return ::core::result::Result::Err(
                                    e.chain("Could not decode `ProviderState::payee`"),
                                );
                            }
                            ::core::result::Result::Ok(__codec_res_edqy) => {
                                __codec_res_edqy
                            }
                        }
                    },
                })
            }
        }
    };
    /// The Prosopo error types
    ///
    pub enum Error {
        /// Returned if minimum number of operators is not supplied
        MinimumTwoOperatorsRequired,
        /// Returned if calling account is not authorised to perform action
        NotAuthorised,
        /// Returned if not enough contract balance to fulfill a request is available.
        ContractInsufficientFunds,
        /// Returned when the contract to address transfer fails
        ContractTransferFailed,
        /// Returned if provider exists when it shouldn't
        ProviderExists,
        /// Returned if provider does not exist when it should
        ProviderDoesNotExist,
        /// Returned if provider has insufficient funds to operate
        ProviderInsufficientFunds,
        /// Returned if provider is inactive and trying to use the service
        ProviderInactive,
        /// Returned if service_origin is already used by another provider
        ProviderServiceOriginUsed,
        /// Returned if requested captcha data id is unavailable
        DuplicateCaptchaDataId,
        /// Returned if dapp exists when it shouldn't
        DappExists,
        /// Returned if dapp does not exist when it should
        DappDoesNotExist,
        /// Returned if dapp is inactive and trying to use the service
        DappInactive,
        /// Returned if dapp has insufficient funds to operate
        DappInsufficientFunds,
        /// Returned if captcha data does not exist
        CaptchaDataDoesNotExist,
        /// Returned if solution commitment does not exist when it should
        CaptchaSolutionCommitmentDoesNotExist,
        /// Returned if solution commitment already exists when it should not
        CaptchaSolutionCommitmentExists,
        /// Returned if dapp user does not exist when it should
        DappUserDoesNotExist,
        /// Returned if there are no active providers
        NoActiveProviders,
        /// Returned if the dataset ID and dataset ID with solutions are identical
        DatasetIdSolutionsSame,
        /// Returned if the captcha solution commitment has already been approved
        CaptchaSolutionCommitmentAlreadyApproved,
        /// Returned if the captcha solution commitment has already been approved
        CaptchaSolutionCommitmentAlreadyDisapproved,
        /// Returned if the caller has set their own AccountId as the code hash
        InvalidCodeHash,
        /// CodeNotFound ink env error
        CodeNotFound,
        /// An unknown ink env error has occurred
        #[default]
        Unknown,
        /// Invalid contract
        InvalidContract,
        /// Invalid payee. Returned when the payee value does not exist in the enum
        InvalidPayee,
        /// Returned if not all captcha statuses have been handled
        InvalidCaptchaStatus,
        /// No correct captchas in history (either history is empty or all captchas are incorrect)
        NoCorrectCaptcha,
        /// Returned if the function has been disabled in the contract
        FunctionDisabled,
    }
    #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
    const _: () = {
        impl ::scale_info::TypeInfo for Error {
            type Identity = Self;
            fn type_info() -> ::scale_info::Type {
                ::scale_info::Type::builder()
                    .path(::scale_info::Path::new("Error", "prosopo::prosopo"))
                    .type_params(::alloc::vec::Vec::new())
                    .docs(&["The Prosopo error types", ""])
                    .variant(
                        ::scale_info::build::Variants::new()
                            .variant(
                                "MinimumTwoOperatorsRequired",
                                |v| {
                                    v
                                        .index(0usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if minimum number of operators is not supplied"],
                                        )
                                },
                            )
                            .variant(
                                "NotAuthorised",
                                |v| {
                                    v
                                        .index(1usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if calling account is not authorised to perform action",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "ContractInsufficientFunds",
                                |v| {
                                    v
                                        .index(2usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if not enough contract balance to fulfill a request is available.",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "ContractTransferFailed",
                                |v| {
                                    v
                                        .index(3usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned when the contract to address transfer fails"],
                                        )
                                },
                            )
                            .variant(
                                "ProviderExists",
                                |v| {
                                    v
                                        .index(4usize as ::core::primitive::u8)
                                        .docs(&["Returned if provider exists when it shouldn't"])
                                },
                            )
                            .variant(
                                "ProviderDoesNotExist",
                                |v| {
                                    v
                                        .index(5usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if provider does not exist when it should"],
                                        )
                                },
                            )
                            .variant(
                                "ProviderInsufficientFunds",
                                |v| {
                                    v
                                        .index(6usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if provider has insufficient funds to operate"],
                                        )
                                },
                            )
                            .variant(
                                "ProviderInactive",
                                |v| {
                                    v
                                        .index(7usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if provider is inactive and trying to use the service",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "ProviderServiceOriginUsed",
                                |v| {
                                    v
                                        .index(8usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if service_origin is already used by another provider",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "DuplicateCaptchaDataId",
                                |v| {
                                    v
                                        .index(9usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if requested captcha data id is unavailable"],
                                        )
                                },
                            )
                            .variant(
                                "DappExists",
                                |v| {
                                    v
                                        .index(10usize as ::core::primitive::u8)
                                        .docs(&["Returned if dapp exists when it shouldn't"])
                                },
                            )
                            .variant(
                                "DappDoesNotExist",
                                |v| {
                                    v
                                        .index(11usize as ::core::primitive::u8)
                                        .docs(&["Returned if dapp does not exist when it should"])
                                },
                            )
                            .variant(
                                "DappInactive",
                                |v| {
                                    v
                                        .index(12usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if dapp is inactive and trying to use the service",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "DappInsufficientFunds",
                                |v| {
                                    v
                                        .index(13usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if dapp has insufficient funds to operate"],
                                        )
                                },
                            )
                            .variant(
                                "CaptchaDataDoesNotExist",
                                |v| {
                                    v
                                        .index(14usize as ::core::primitive::u8)
                                        .docs(&["Returned if captcha data does not exist"])
                                },
                            )
                            .variant(
                                "CaptchaSolutionCommitmentDoesNotExist",
                                |v| {
                                    v
                                        .index(15usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if solution commitment does not exist when it should",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "CaptchaSolutionCommitmentExists",
                                |v| {
                                    v
                                        .index(16usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if solution commitment already exists when it should not",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "DappUserDoesNotExist",
                                |v| {
                                    v
                                        .index(17usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if dapp user does not exist when it should"],
                                        )
                                },
                            )
                            .variant(
                                "NoActiveProviders",
                                |v| {
                                    v
                                        .index(18usize as ::core::primitive::u8)
                                        .docs(&["Returned if there are no active providers"])
                                },
                            )
                            .variant(
                                "DatasetIdSolutionsSame",
                                |v| {
                                    v
                                        .index(19usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if the dataset ID and dataset ID with solutions are identical",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "CaptchaSolutionCommitmentAlreadyApproved",
                                |v| {
                                    v
                                        .index(20usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if the captcha solution commitment has already been approved",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "CaptchaSolutionCommitmentAlreadyDisapproved",
                                |v| {
                                    v
                                        .index(21usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if the captcha solution commitment has already been approved",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "InvalidCodeHash",
                                |v| {
                                    v
                                        .index(22usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if the caller has set their own AccountId as the code hash",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "CodeNotFound",
                                |v| {
                                    v
                                        .index(23usize as ::core::primitive::u8)
                                        .docs(&["CodeNotFound ink env error"])
                                },
                            )
                            .variant(
                                "Unknown",
                                |v| {
                                    v
                                        .index(24usize as ::core::primitive::u8)
                                        .docs(&["An unknown ink env error has occurred"])
                                },
                            )
                            .variant(
                                "InvalidContract",
                                |v| {
                                    v
                                        .index(25usize as ::core::primitive::u8)
                                        .docs(&["Invalid contract"])
                                },
                            )
                            .variant(
                                "InvalidPayee",
                                |v| {
                                    v
                                        .index(26usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Invalid payee. Returned when the payee value does not exist in the enum",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "InvalidCaptchaStatus",
                                |v| {
                                    v
                                        .index(27usize as ::core::primitive::u8)
                                        .docs(
                                            &["Returned if not all captcha statuses have been handled"],
                                        )
                                },
                            )
                            .variant(
                                "NoCorrectCaptcha",
                                |v| {
                                    v
                                        .index(28usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "No correct captchas in history (either history is empty or all captchas are incorrect)",
                                            ],
                                        )
                                },
                            )
                            .variant(
                                "FunctionDisabled",
                                |v| {
                                    v
                                        .index(29usize as ::core::primitive::u8)
                                        .docs(
                                            &[
                                                "Returned if the function has been disabled in the contract",
                                            ],
                                        )
                                },
                            ),
                    )
            }
        }
    };
    const _: () = {
        impl ::ink::storage::traits::StorageLayout for Error {
            fn layout(
                __key: &::ink::primitives::Key,
            ) -> ::ink::metadata::layout::Layout {
                ::ink::metadata::layout::Layout::Enum(
                    ::ink::metadata::layout::EnumLayout::new(
                        "Error",
                        ::ink::metadata::layout::LayoutKey::from(__key),
                        [
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(0usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "MinimumTwoOperatorsRequired",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(1usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "NotAuthorised",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(2usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ContractInsufficientFunds",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(3usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ContractTransferFailed",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(4usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ProviderExists",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(5usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ProviderDoesNotExist",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(6usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ProviderInsufficientFunds",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(7usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ProviderInactive",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(8usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "ProviderServiceOriginUsed",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(9usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DuplicateCaptchaDataId",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(10usize),
                                    ::ink::metadata::layout::StructLayout::new("DappExists", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(11usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DappDoesNotExist",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(12usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DappInactive",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(13usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DappInsufficientFunds",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(14usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CaptchaDataDoesNotExist",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(15usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CaptchaSolutionCommitmentDoesNotExist",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(16usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CaptchaSolutionCommitmentExists",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(17usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DappUserDoesNotExist",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(18usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "NoActiveProviders",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(19usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "DatasetIdSolutionsSame",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(20usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CaptchaSolutionCommitmentAlreadyApproved",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(21usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CaptchaSolutionCommitmentAlreadyDisapproved",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(22usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "InvalidCodeHash",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(23usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "CodeNotFound",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(24usize),
                                    ::ink::metadata::layout::StructLayout::new("Unknown", []),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(25usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "InvalidContract",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(26usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "InvalidPayee",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(27usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "InvalidCaptchaStatus",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(28usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "NoCorrectCaptcha",
                                        [],
                                    ),
                                )
                            },
                            {
                                (
                                    ::ink::metadata::layout::Discriminant::from(29usize),
                                    ::ink::metadata::layout::StructLayout::new(
                                        "FunctionDisabled",
                                        [],
                                    ),
                                )
                            },
                        ],
                    ),
                )
            }
        }
    };
    #[automatically_derived]
    impl ::core::default::Default for Error {
        #[inline]
        fn default() -> Error {
            Self::Unknown
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Error {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Error {
        #[inline]
        fn eq(&self, other: &Error) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Error {
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Error::MinimumTwoOperatorsRequired => "MinimumTwoOperatorsRequired",
                    Error::NotAuthorised => "NotAuthorised",
                    Error::ContractInsufficientFunds => "ContractInsufficientFunds",
                    Error::ContractTransferFailed => "ContractTransferFailed",
                    Error::ProviderExists => "ProviderExists",
                    Error::ProviderDoesNotExist => "ProviderDoesNotExist",
                    Error::ProviderInsufficientFunds => "ProviderInsufficientFunds",
                    Error::ProviderInactive => "ProviderInactive",
                    Error::ProviderServiceOriginUsed => "ProviderServiceOriginUsed",
                    Error::DuplicateCaptchaDataId => "DuplicateCaptchaDataId",
                    Error::DappExists => "DappExists",
                    Error::DappDoesNotExist => "DappDoesNotExist",
                    Error::DappInactive => "DappInactive",
                    Error::DappInsufficientFunds => "DappInsufficientFunds",
                    Error::CaptchaDataDoesNotExist => "CaptchaDataDoesNotExist",
                    Error::CaptchaSolutionCommitmentDoesNotExist => {
                        "CaptchaSolutionCommitmentDoesNotExist"
                    }
                    Error::CaptchaSolutionCommitmentExists => {
                        "CaptchaSolutionCommitmentExists"
                    }
                    Error::DappUserDoesNotExist => "DappUserDoesNotExist",
                    Error::NoActiveProviders => "NoActiveProviders",
                    Error::DatasetIdSolutionsSame => "DatasetIdSolutionsSame",
                    Error::CaptchaSolutionCommitmentAlreadyApproved => {
                        "CaptchaSolutionCommitmentAlreadyApproved"
                    }
                    Error::CaptchaSolutionCommitmentAlreadyDisapproved => {
                        "CaptchaSolutionCommitmentAlreadyDisapproved"
                    }
                    Error::InvalidCodeHash => "InvalidCodeHash",
                    Error::CodeNotFound => "CodeNotFound",
                    Error::Unknown => "Unknown",
                    Error::InvalidContract => "InvalidContract",
                    Error::InvalidPayee => "InvalidPayee",
                    Error::InvalidCaptchaStatus => "InvalidCaptchaStatus",
                    Error::NoCorrectCaptcha => "NoCorrectCaptcha",
                    Error::FunctionDisabled => "FunctionDisabled",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Error {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Error {
        #[inline]
        #[doc(hidden)]
        #[no_coverage]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Error {
        #[inline]
        fn clone(&self) -> Error {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Error {}
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Encode for Error {
            fn encode_to<__CodecOutputEdqy: ::scale::Output + ?::core::marker::Sized>(
                &self,
                __codec_dest_edqy: &mut __CodecOutputEdqy,
            ) {
                match *self {
                    Error::MinimumTwoOperatorsRequired => {
                        __codec_dest_edqy.push_byte(0usize as ::core::primitive::u8);
                    }
                    Error::NotAuthorised => {
                        __codec_dest_edqy.push_byte(1usize as ::core::primitive::u8);
                    }
                    Error::ContractInsufficientFunds => {
                        __codec_dest_edqy.push_byte(2usize as ::core::primitive::u8);
                    }
                    Error::ContractTransferFailed => {
                        __codec_dest_edqy.push_byte(3usize as ::core::primitive::u8);
                    }
                    Error::ProviderExists => {
                        __codec_dest_edqy.push_byte(4usize as ::core::primitive::u8);
                    }
                    Error::ProviderDoesNotExist => {
                        __codec_dest_edqy.push_byte(5usize as ::core::primitive::u8);
                    }
                    Error::ProviderInsufficientFunds => {
                        __codec_dest_edqy.push_byte(6usize as ::core::primitive::u8);
                    }
                    Error::ProviderInactive => {
                        __codec_dest_edqy.push_byte(7usize as ::core::primitive::u8);
                    }
                    Error::ProviderServiceOriginUsed => {
                        __codec_dest_edqy.push_byte(8usize as ::core::primitive::u8);
                    }
                    Error::DuplicateCaptchaDataId => {
                        __codec_dest_edqy.push_byte(9usize as ::core::primitive::u8);
                    }
                    Error::DappExists => {
                        __codec_dest_edqy.push_byte(10usize as ::core::primitive::u8);
                    }
                    Error::DappDoesNotExist => {
                        __codec_dest_edqy.push_byte(11usize as ::core::primitive::u8);
                    }
                    Error::DappInactive => {
                        __codec_dest_edqy.push_byte(12usize as ::core::primitive::u8);
                    }
                    Error::DappInsufficientFunds => {
                        __codec_dest_edqy.push_byte(13usize as ::core::primitive::u8);
                    }
                    Error::CaptchaDataDoesNotExist => {
                        __codec_dest_edqy.push_byte(14usize as ::core::primitive::u8);
                    }
                    Error::CaptchaSolutionCommitmentDoesNotExist => {
                        __codec_dest_edqy.push_byte(15usize as ::core::primitive::u8);
                    }
                    Error::CaptchaSolutionCommitmentExists => {
                        __codec_dest_edqy.push_byte(16usize as ::core::primitive::u8);
                    }
                    Error::DappUserDoesNotExist => {
                        __codec_dest_edqy.push_byte(17usize as ::core::primitive::u8);
                    }
                    Error::NoActiveProviders => {
                        __codec_dest_edqy.push_byte(18usize as ::core::primitive::u8);
                    }
                    Error::DatasetIdSolutionsSame => {
                        __codec_dest_edqy.push_byte(19usize as ::core::primitive::u8);
                    }
                    Error::CaptchaSolutionCommitmentAlreadyApproved => {
                        __codec_dest_edqy.push_byte(20usize as ::core::primitive::u8);
                    }
                    Error::CaptchaSolutionCommitmentAlreadyDisapproved => {
                        __codec_dest_edqy.push_byte(21usize as ::core::primitive::u8);
                    }
                    Error::InvalidCodeHash => {
                        __codec_dest_edqy.push_byte(22usize as ::core::primitive::u8);
                    }
                    Error::CodeNotFound => {
                        __codec_dest_edqy.push_byte(23usize as ::core::primitive::u8);
                    }
                    Error::Unknown => {
                        __codec_dest_edqy.push_byte(24usize as ::core::primitive::u8);
                    }
                    Error::InvalidContract => {
                        __codec_dest_edqy.push_byte(25usize as ::core::primitive::u8);
                    }
                    Error::InvalidPayee => {
                        __codec_dest_edqy.push_byte(26usize as ::core::primitive::u8);
                    }
                    Error::InvalidCaptchaStatus => {
                        __codec_dest_edqy.push_byte(27usize as ::core::primitive::u8);
                    }
                    Error::NoCorrectCaptcha => {
                        __codec_dest_edqy.push_byte(28usize as ::core::primitive::u8);
                    }
                    Error::FunctionDisabled => {
                        __codec_dest_edqy.push_byte(29usize as ::core::primitive::u8);
                    }
                    _ => {}
                }
            }
        }
        #[automatically_derived]
        impl ::scale::EncodeLike for Error {}
    };
    #[allow(deprecated)]
    const _: () = {
        #[automatically_derived]
        impl ::scale::Decode for Error {
            fn decode<__CodecInputEdqy: ::scale::Input>(
                __codec_input_edqy: &mut __CodecInputEdqy,
            ) -> ::core::result::Result<Self, ::scale::Error> {
                match __codec_input_edqy
                    .read_byte()
                    .map_err(|e| {
                        e.chain("Could not decode `Error`, failed to read variant byte")
                    })?
                {
                    __codec_x_edqy if __codec_x_edqy
                        == 0usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::MinimumTwoOperatorsRequired)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 1usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::NotAuthorised)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 2usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ContractInsufficientFunds)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 3usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ContractTransferFailed)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 4usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ProviderExists)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 5usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ProviderDoesNotExist)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 6usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ProviderInsufficientFunds)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 7usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ProviderInactive)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 8usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::ProviderServiceOriginUsed)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 9usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DuplicateCaptchaDataId)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 10usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DappExists)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 11usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DappDoesNotExist)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 12usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DappInactive)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 13usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DappInsufficientFunds)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 14usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::CaptchaDataDoesNotExist)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 15usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            Error::CaptchaSolutionCommitmentDoesNotExist,
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 16usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            Error::CaptchaSolutionCommitmentExists,
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 17usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DappUserDoesNotExist)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 18usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::NoActiveProviders)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 19usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::DatasetIdSolutionsSame)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 20usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            Error::CaptchaSolutionCommitmentAlreadyApproved,
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 21usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(
                            Error::CaptchaSolutionCommitmentAlreadyDisapproved,
                        )
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 22usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::InvalidCodeHash)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 23usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::CodeNotFound)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 24usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::Unknown)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 25usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::InvalidContract)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 26usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::InvalidPayee)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 27usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::InvalidCaptchaStatus)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 28usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::NoCorrectCaptcha)
                    }
                    __codec_x_edqy if __codec_x_edqy
                        == 29usize as ::core::primitive::u8 => {
                        ::core::result::Result::Ok(Error::FunctionDisabled)
                    }
                    _ => {
                        ::core::result::Result::Err(
                            <_ as ::core::convert::Into<
                                _,
                            >>::into("Could not decode `Error`, variant doesn't exist"),
                        )
                    }
                }
            }
        }
    };
}
