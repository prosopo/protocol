name: Rust

on:
  pull_request:
    branches:
      - 'develop'
      - 'main'

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      # Checkout the repo
      - uses: actions/checkout@v3

      - run: ls -la
      - run: ls -la ~

      - name: Restore rust_env_cache
        uses: actions/cache/restore@v3
        with:
          path: rust_env_cache
          key: rust-env-cache-${{ runner.os }}-${{ runner.arch }}
          restore-keys: |
            rust-env-cache-${{ runner.os }}-${{ runner.arch }}-

      - run: ls -la
      - run: ls -la ~

      # load imgs from cache
      - name: Load contracts-ci docker image
        run: |
          ls rust_env_cache
          docker load -i rust_env_cache/contracts-ci-linux.tar || true
      
      - run: ls -la
      - run: ls -la ~

      # Check if rust is formatted correctly
      - name: Rust formatting check
        run: |
          docker run --rm -v $(pwd)/contracts:/contracts paritytech/contracts-ci-linux:latest cargo +nightly fmt --manifest-path=/contracts/Cargo.toml -- --check --verbose

      # Restore the cargo build from cache, if available
      - name: Restore cached cargo build
        uses: actions/cache/restore@v3
        with:
          path: |
            contracts/target
          # the cached build is based on the OS, architecture, a tag and the hash of the config files for this build, i.e. the Cargo configuration. The cargo configs may differ across workflows, so the files have to be the same to reuse the cached build image across workflows
          # restore from a cache matching the key, e.g. "Linux-X64-cargo-env-abcdef123"
          # "abcdef123" could be anything, it is a random string to differentiate cache usages
          # e.g. "Linux-X64-cargo-a1" may be from 1/1/23, whereas "Linux-X64-cargo-b2" may be from 2/1/23.
          # github will match the most recent cache ("b2") when searching for caches and finding multiple matches
          # the "-" on the end of the key acts like "-*" where the "*" can be any number of characters, including none
          key: cargo-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          restore-keys: |
            key: cargo-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-
      
      - run: ls -la
      - run: ls -la ~

      # Check for clippy advice
      - name: Clippy advice
        run: |
          docker run --rm -v $(pwd)/contracts:/contracts paritytech/contracts-ci-linux:latest cargo +nightly clippy --manifest-path=/contracts/Cargo.toml -- -D warnings

      # Do the build
      - name: Build
        id: build
        run: | 
          docker run --rm -v $(pwd)/contracts:/contracts paritytech/contracts-ci-linux:latest cargo +nightly contract build --release --manifest-path=/contracts/Cargo.toml
          # parity's docker image runs using root, so need to chown the output
          sudo chown -cR $(whoami) contracts
          
      # Do unit testing
      - name: Test
        run: |
          RUST_BACKTRACE=1 docker run --rm -v $(pwd)/contracts:/contracts paritytech/contracts-ci-linux:latest cargo +nightly test  --no-default-features --features std --manifest-path=/contracts/Cargo.toml -- --nocapture
          result=$?
          sudo chown -cR $(whoami) contracts
          exit $result
          
      # Save build + test files to cache, use for incremental builds in other runs to speed up future workflows with minor changes
      - name: Save cargo build to cache
        uses: actions/cache/save@v3
        # save cache if build work has been done, independent of whether it failed/succeeded
        if: always() && (${{ steps.build.conclusion }} == "success" || ${{ steps.build.conclusion }} == "failure")
        with:
          path: |
            contracts/target
          # store this version in the cache tagged with the id of this job. This differentiates it from any other caches for the same build without mutating them, as other workflows may be using them
          key: cargo-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Cleanup stale cargo build caches
        if: always() && (${{ steps.build.conclusion }} == "success" || ${{ steps.build.conclusion }} == "failure")
        run: |
          set +e; gh extension install actions/gh-actions-cache; set -e
          REPO=${{ github.repository }}
          echo "Fetching list of cache key"
          # get all but the most recent cache
          cacheKeysForPR=$(gh actions-cache list --sort created-at --order desc --limit 100 -R $REPO --key cargo-build-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}- | cut -f 1 | tail -n +2 )
          echo caches to be removed:
          echo ${cacheKeysForPR}
          # delete the stale caches
          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO --confirm
          done
