name: Rust

on:
  pull_request:
    branches:
      - 'develop'
      - 'main'

env:
  CARGO_TERM_COLOR: always
  cargo_env_version: ${{ runner.os }}-cargo-env
  cargo_build_version: ${{ runner.os }}-cargo-build
  cargo_test_version: ${{ runner.os }}-cargo-test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: ls
        run: |
          pwd
          echo ls -la
          ls -la
          echo ls -la ~
          ls -la ~

      ################ SETUP RUST

      - name: Restore cached cargo-env
        id: restore-cache-cargo-env
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo
            ~/.dylint_drivers
          key: ${{ env.cargo-env-version }}

      - name: Setup rust environment
        if: steps.restore-cache-cargo-env.outputs.cache-hit != 'true'
        run: |
          echo install nightly
          rustup toolchain install nightly-x86_64-unknown-linux-gnu
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          # to compile the std lib we nee the src
          rustup default nightly-x86_64-unknown-linux-gnu
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          echo set browser wasm target
          rustup target add wasm32-unknown-unknown --toolchain nightly
          # echo install tarpaulin and dylint
          # cargo +nightly install cargo-tarpaulin cargo-dylint dylint-link
          echo install cargo-contract
          cargo install cargo-contract --version 2.0.0-rc

      - name: Update rust
        id: update-rust
        if: steps.restore-cache-cargo-env.outputs.cache-hit != 'true'
        run: |
          if [[ $(rustup update | wc -l) -gt 2 ]]; then
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Update cargo
        id: update-cargo
        if: steps.restore-cache-cargo-env.outputs.cache-hit != 'true'
        run: |
          if [[ $(rustup update | wc -l) -gt 4 ]]; then
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "updated=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Clear cargo env cache
        if: steps.restore-cache-cargo-env.outputs.cache-hit != 'true' || steps.update-cargo.outputs.upgraded == 'true' || steps.update-rust.outputs.upgraded == 'true'
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            /repos/OWNER/REPO/actions/caches?key=${{ env.cargo-env-version }}

      - name: Save cargo env to cache
        if: steps.restore-cache-cargo-env.outputs.cache-hit != 'true' || steps.update-cargo.outputs.upgraded == 'true' || steps.update-rust.outputs.upgraded == 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cargo
            ~/.dylint_drivers
          key: ${{ env.cargo-env-version }}

      ################ BUILD

      - name: Restore cached cargo build
        id: restore-cache-cargo-build
        uses: actions/cache/restore@v3
        with:
          path: |
            ./contracts/target
          key: ${{ env.cargo-build-version }}

      - name: Configure rust environment
        run: |
          # to compile the std lib we nee the src
          rustup default nightly-x86_64-unknown-linux-gnu
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu

      - name: Build
        run: |
          cd contracts
          cargo contract build --optimization-passes 0

      - name: Clear cargo build cache
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            /repos/OWNER/REPO/actions/caches?key=${{ env.cargo-build-version }}

      - name: Save cargo build to cache
        uses: actions/cache/save@v3
        with:
          path: |
            ./contracts/target
          key: ${{ env.cargo-build-version }}

      ################ TEST

      - name: Test
        run: |
          cd contracts
          RUST_BACKTRACE=1 cargo test --no-default-features --features std -- --nocapture
          exit $?

      - name: Clear cargo build cache
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            /repos/OWNER/REPO/actions/caches?key=${{ env.cargo-build-version }}

      - name: Save cargo build to cache
        uses: actions/cache/save@v3
        with:
          path: |
            ./contracts/target
          key: ${{ env.cargo-build-version }}